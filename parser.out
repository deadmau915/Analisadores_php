Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> OPEN_TAG declaration_list CLOSE_TAG
Rule 2     declaration_list -> declaration_list declaration
Rule 3     declaration_list -> declaration
Rule 4     declaration -> var_declaration2
Rule 5     declaration -> fun_declaration
Rule 6     declaration -> header_declaration
Rule 7     declaration -> class_declaration
Rule 8     declaration -> print_stmt
Rule 9     declaration -> selection_stmt
Rule 10    declaration -> iteration_stmt
Rule 11    print_stmt -> print_stmt ECHO STRING SEMICOLON
Rule 12    print_stmt -> print_stmt ECHO ID SEMICOLON
Rule 13    print_stmt -> empty
Rule 14    header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON
Rule 15    class_declaration -> CLASS FUNCTION_NAME class_stmt
Rule 16    class_stmt -> LBLOCK print_stmt attributes print_stmt methods print_stmt RBLOCK
Rule 17    attributes -> attributes scope var_declaration2
Rule 18    attributes -> scope var_declaration2
Rule 19    methods -> methods scope fun_declaration
Rule 20    methods -> scope fun_declaration
Rule 21    scope -> PRIVATE
Rule 22    scope -> PUBLIC
Rule 23    scope -> PROTECTED
Rule 24    var_declaration2 -> ID SEMICOLON var_declaration2
Rule 25    var_declaration2 -> ID SEMICOLON
Rule 26    var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2
Rule 27    var_declaration2 -> ID EQUAL NUMBER SEMICOLON
Rule 28    var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2
Rule 29    var_declaration2 -> ID EQUAL boolean SEMICOLON
Rule 30    var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2
Rule 31    var_declaration2 -> ID EQUAL ID SEMICOLON
Rule 32    var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2
Rule 33    var_declaration2 -> AMPERSANT ID SEMICOLON
Rule 34    fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt
Rule 35    params -> param_list
Rule 36    params -> empty
Rule 37    param_list -> param_list COMMA param
Rule 38    param_list -> param
Rule 39    param -> ID
Rule 40    param -> ID LBRACKET RBRACKET
Rule 41    compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
Rule 42    local_declarations -> local_declarations var_declaration2
Rule 43    local_declarations -> empty
Rule 44    statement_list -> statement_list statement
Rule 45    statement_list -> empty
Rule 46    statement -> expression_stmt
Rule 47    statement -> compount_stmt
Rule 48    statement -> selection_stmt
Rule 49    statement -> iteration_stmt
Rule 50    statement -> return_stmt
Rule 51    expression_stmt -> expression SEMICOLON
Rule 52    expression_stmt -> SEMICOLON
Rule 53    selection_stmt -> IF LPAREN expression RPAREN statement
Rule 54    selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement
Rule 55    selection_stmt -> SWITCH LPAREN var RPAREN statement
Rule 56    selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON
Rule 57    selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON
Rule 58    selection_stmt -> print_stmt
Rule 59    iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
Rule 60    iteration_stmt -> WHILE LPAREN expression RPAREN statement
Rule 61    iteration_stmt -> print_stmt
Rule 62    return_stmt -> RETURN SEMICOLON
Rule 63    return_stmt -> RETURN expression SEMICOLON
Rule 64    expression -> var EQUAL expression
Rule 65    expression -> simple_expression
Rule 66    expression -> var EQUAL AMPERSANT ID
Rule 67    var -> ID
Rule 68    var -> ID LBRACKET expression RBRACKET
Rule 69    simple_expression -> additive_expression relop additive_expression
Rule 70    simple_expression -> additive_expression
Rule 71    relop -> LESS
Rule 72    relop -> LESSEQUAL
Rule 73    relop -> GREATER
Rule 74    relop -> GREATEREQUAL
Rule 75    relop -> DEQUAL
Rule 76    relop -> DISTINT
Rule 77    relop -> ISEQUAL
Rule 78    additive_expression -> additive_expression addop term
Rule 79    additive_expression -> term
Rule 80    additive_expression -> term MINUSMINUS
Rule 81    additive_expression -> term PLUSPLUS
Rule 82    addop -> PLUS
Rule 83    addop -> MINUS
Rule 84    term -> term mulop factor
Rule 85    term -> factor
Rule 86    mulop -> TIMES
Rule 87    mulop -> DIVIDE
Rule 88    factor -> LPAREN expression RPAREN
Rule 89    factor -> var
Rule 90    factor -> call
Rule 91    factor -> NUMBER
Rule 92    factor -> boolean
Rule 93    call -> ID LPAREN args RPAREN
Rule 94    args -> args_list
Rule 95    args -> empty
Rule 96    args_list -> args_list COMMA expression
Rule 97    args_list -> expression
Rule 98    boolean -> TRUE
Rule 99    boolean -> FALSE
Rule 100   empty -> <empty>

Terminals, with rules where they appear

AMPERSANT            : 32 33 66
BREAK                : 56 57
CASE                 : 56
CLASS                : 15
CLOSE_TAG            : 1
COLON                : 56 57
COMMA                : 37 96
DEFAULT              : 57
DEQUAL               : 75
DISTINT              : 76
DIVIDE               : 87
ECHO                 : 11 12
ELSE                 : 54
EQUAL                : 26 27 28 29 30 31 64 66
FALSE                : 99
FOR                  : 59
FUNCTION             : 34
FUNCTION_NAME        : 15 34
GREATER              : 73
GREATEREQUAL         : 74
ID                   : 12 24 25 26 27 28 29 30 30 31 31 32 33 39 40 66 67 68 93
IF                   : 53 54
ISEQUAL              : 77
LBLOCK               : 16 41
LBRACKET             : 40 68
LESS                 : 71
LESSEQUAL            : 72
LPAREN               : 14 34 53 54 55 59 60 88 93
MINUS                : 83
MINUSMINUS           : 80
NUMBER               : 26 27 56 91
OPEN_TAG             : 1
PLUS                 : 82
PLUSPLUS             : 81
PRIVATE              : 21
PROTECTED            : 23
PUBLIC               : 22
RBLOCK               : 16 41
RBRACKET             : 40 68
REQUIRE              : 14
RETURN               : 62 63
RPAREN               : 14 34 53 54 55 59 60 88 93
SEMICOLON            : 11 12 14 24 25 26 27 28 29 30 31 32 33 51 52 56 57 59 59 62 63
STRING               : 11 14
SWITCH               : 55
TIMES                : 86
TRUE                 : 98
WHILE                : 60
error                : 

Nonterminals, with rules where they appear

additive_expression  : 59 69 69 70 78
addop                : 78
args                 : 93
args_list            : 94 96
attributes           : 16 17
boolean              : 28 29 92
call                 : 90
class_declaration    : 7
class_stmt           : 15
compount_stmt        : 34 47
declaration          : 2 3
declaration_list     : 1 2
empty                : 13 36 43 45 95
expression           : 51 53 54 59 60 63 64 68 88 96 97
expression_stmt      : 46
factor               : 84 85
fun_declaration      : 5 19 20
header_declaration   : 6
iteration_stmt       : 10 49
local_declarations   : 41 42
methods              : 16 19
mulop                : 84
param                : 37 38
param_list           : 35 37
params               : 34
print_stmt           : 8 11 12 16 16 16 41 41 41 58 61
program              : 0
relop                : 69
return_stmt          : 50
scope                : 17 18 19 20
selection_stmt       : 9 48
simple_expression    : 65
statement            : 44 53 54 54 55 56 57 59 60
statement_list       : 41 44
term                 : 78 79 80 81 84
var                  : 55 64 66 89
var_declaration2     : 4 17 18 24 26 28 30 32 42 59

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . OPEN_TAG declaration_list CLOSE_TAG

    OPEN_TAG        shift and go to state 1

    program                        shift and go to state 2

state 1

    (1) program -> OPEN_TAG . declaration_list CLOSE_TAG
    (2) declaration_list -> . declaration_list declaration
    (3) declaration_list -> . declaration
    (4) declaration -> . var_declaration2
    (5) declaration -> . fun_declaration
    (6) declaration -> . header_declaration
    (7) declaration -> . class_declaration
    (8) declaration -> . print_stmt
    (9) declaration -> . selection_stmt
    (10) declaration -> . iteration_stmt
    (24) var_declaration2 -> . ID SEMICOLON var_declaration2
    (25) var_declaration2 -> . ID SEMICOLON
    (26) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON var_declaration2
    (27) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON
    (28) var_declaration2 -> . ID EQUAL boolean SEMICOLON var_declaration2
    (29) var_declaration2 -> . ID EQUAL boolean SEMICOLON
    (30) var_declaration2 -> . ID EQUAL ID SEMICOLON var_declaration2
    (31) var_declaration2 -> . ID EQUAL ID SEMICOLON
    (32) var_declaration2 -> . AMPERSANT ID SEMICOLON var_declaration2
    (33) var_declaration2 -> . AMPERSANT ID SEMICOLON
    (34) fun_declaration -> . FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt
    (14) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMICOLON
    (15) class_declaration -> . CLASS FUNCTION_NAME class_stmt
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (55) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . print_stmt
    (59) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (60) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (61) iteration_stmt -> . print_stmt
    (100) empty -> .

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    ID              shift and go to state 20
    AMPERSANT       shift and go to state 16
    FUNCTION        shift and go to state 3
    REQUIRE         shift and go to state 5
    CLASS           shift and go to state 13
    IF              shift and go to state 12
    SWITCH          shift and go to state 10
    CASE            shift and go to state 9
    DEFAULT         shift and go to state 4
    FOR             shift and go to state 17
    WHILE           shift and go to state 6
    ECHO            reduce using rule 100 (empty -> .)
    CLOSE_TAG       reduce using rule 100 (empty -> .)

  ! ID              [ reduce using rule 100 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 100 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 100 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 100 (empty -> .) ]
  ! CLASS           [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! SWITCH          [ reduce using rule 100 (empty -> .) ]
  ! CASE            [ reduce using rule 100 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]

    header_declaration             shift and go to state 15
    print_stmt                     shift and go to state 18
    declaration_list               shift and go to state 21
    class_declaration              shift and go to state 22
    fun_declaration                shift and go to state 23
    iteration_stmt                 shift and go to state 7
    declaration                    shift and go to state 19
    var_declaration2               shift and go to state 8
    selection_stmt                 shift and go to state 11
    empty                          shift and go to state 14

state 2

    (0) S' -> program .



state 3

    (34) fun_declaration -> FUNCTION . FUNCTION_NAME LPAREN params RPAREN compount_stmt

    FUNCTION_NAME   shift and go to state 24


state 4

    (57) selection_stmt -> DEFAULT . COLON statement BREAK SEMICOLON

    COLON           shift and go to state 25


state 5

    (14) header_declaration -> REQUIRE . LPAREN STRING RPAREN SEMICOLON

    LPAREN          shift and go to state 26


state 6

    (60) iteration_stmt -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 27


state 7

    (10) declaration -> iteration_stmt .

    CLOSE_TAG       reduce using rule 10 (declaration -> iteration_stmt .)
    ID              reduce using rule 10 (declaration -> iteration_stmt .)
    AMPERSANT       reduce using rule 10 (declaration -> iteration_stmt .)
    FUNCTION        reduce using rule 10 (declaration -> iteration_stmt .)
    REQUIRE         reduce using rule 10 (declaration -> iteration_stmt .)
    CLASS           reduce using rule 10 (declaration -> iteration_stmt .)
    IF              reduce using rule 10 (declaration -> iteration_stmt .)
    SWITCH          reduce using rule 10 (declaration -> iteration_stmt .)
    CASE            reduce using rule 10 (declaration -> iteration_stmt .)
    DEFAULT         reduce using rule 10 (declaration -> iteration_stmt .)
    FOR             reduce using rule 10 (declaration -> iteration_stmt .)
    WHILE           reduce using rule 10 (declaration -> iteration_stmt .)
    ECHO            reduce using rule 10 (declaration -> iteration_stmt .)


state 8

    (4) declaration -> var_declaration2 .

    CLOSE_TAG       reduce using rule 4 (declaration -> var_declaration2 .)
    ID              reduce using rule 4 (declaration -> var_declaration2 .)
    AMPERSANT       reduce using rule 4 (declaration -> var_declaration2 .)
    FUNCTION        reduce using rule 4 (declaration -> var_declaration2 .)
    REQUIRE         reduce using rule 4 (declaration -> var_declaration2 .)
    CLASS           reduce using rule 4 (declaration -> var_declaration2 .)
    IF              reduce using rule 4 (declaration -> var_declaration2 .)
    SWITCH          reduce using rule 4 (declaration -> var_declaration2 .)
    CASE            reduce using rule 4 (declaration -> var_declaration2 .)
    DEFAULT         reduce using rule 4 (declaration -> var_declaration2 .)
    FOR             reduce using rule 4 (declaration -> var_declaration2 .)
    WHILE           reduce using rule 4 (declaration -> var_declaration2 .)
    ECHO            reduce using rule 4 (declaration -> var_declaration2 .)


state 9

    (56) selection_stmt -> CASE . NUMBER COLON statement BREAK SEMICOLON

    NUMBER          shift and go to state 28


state 10

    (55) selection_stmt -> SWITCH . LPAREN var RPAREN statement

    LPAREN          shift and go to state 29


state 11

    (9) declaration -> selection_stmt .

    CLOSE_TAG       reduce using rule 9 (declaration -> selection_stmt .)
    ID              reduce using rule 9 (declaration -> selection_stmt .)
    AMPERSANT       reduce using rule 9 (declaration -> selection_stmt .)
    FUNCTION        reduce using rule 9 (declaration -> selection_stmt .)
    REQUIRE         reduce using rule 9 (declaration -> selection_stmt .)
    CLASS           reduce using rule 9 (declaration -> selection_stmt .)
    IF              reduce using rule 9 (declaration -> selection_stmt .)
    SWITCH          reduce using rule 9 (declaration -> selection_stmt .)
    CASE            reduce using rule 9 (declaration -> selection_stmt .)
    DEFAULT         reduce using rule 9 (declaration -> selection_stmt .)
    FOR             reduce using rule 9 (declaration -> selection_stmt .)
    WHILE           reduce using rule 9 (declaration -> selection_stmt .)
    ECHO            reduce using rule 9 (declaration -> selection_stmt .)


state 12

    (53) selection_stmt -> IF . LPAREN expression RPAREN statement
    (54) selection_stmt -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 30


state 13

    (15) class_declaration -> CLASS . FUNCTION_NAME class_stmt

    FUNCTION_NAME   shift and go to state 31


state 14

    (13) print_stmt -> empty .

    RBLOCK          reduce using rule 13 (print_stmt -> empty .)
    ECHO            reduce using rule 13 (print_stmt -> empty .)
    CLOSE_TAG       reduce using rule 13 (print_stmt -> empty .)
    ID              reduce using rule 13 (print_stmt -> empty .)
    AMPERSANT       reduce using rule 13 (print_stmt -> empty .)
    FUNCTION        reduce using rule 13 (print_stmt -> empty .)
    REQUIRE         reduce using rule 13 (print_stmt -> empty .)
    CLASS           reduce using rule 13 (print_stmt -> empty .)
    IF              reduce using rule 13 (print_stmt -> empty .)
    SWITCH          reduce using rule 13 (print_stmt -> empty .)
    CASE            reduce using rule 13 (print_stmt -> empty .)
    DEFAULT         reduce using rule 13 (print_stmt -> empty .)
    FOR             reduce using rule 13 (print_stmt -> empty .)
    WHILE           reduce using rule 13 (print_stmt -> empty .)
    SEMICOLON       reduce using rule 13 (print_stmt -> empty .)
    LBLOCK          reduce using rule 13 (print_stmt -> empty .)
    RETURN          reduce using rule 13 (print_stmt -> empty .)
    LPAREN          reduce using rule 13 (print_stmt -> empty .)
    NUMBER          reduce using rule 13 (print_stmt -> empty .)
    TRUE            reduce using rule 13 (print_stmt -> empty .)
    FALSE           reduce using rule 13 (print_stmt -> empty .)
    BREAK           reduce using rule 13 (print_stmt -> empty .)
    ELSE            reduce using rule 13 (print_stmt -> empty .)
    PRIVATE         reduce using rule 13 (print_stmt -> empty .)
    PUBLIC          reduce using rule 13 (print_stmt -> empty .)
    PROTECTED       reduce using rule 13 (print_stmt -> empty .)


state 15

    (6) declaration -> header_declaration .

    CLOSE_TAG       reduce using rule 6 (declaration -> header_declaration .)
    ID              reduce using rule 6 (declaration -> header_declaration .)
    AMPERSANT       reduce using rule 6 (declaration -> header_declaration .)
    FUNCTION        reduce using rule 6 (declaration -> header_declaration .)
    REQUIRE         reduce using rule 6 (declaration -> header_declaration .)
    CLASS           reduce using rule 6 (declaration -> header_declaration .)
    IF              reduce using rule 6 (declaration -> header_declaration .)
    SWITCH          reduce using rule 6 (declaration -> header_declaration .)
    CASE            reduce using rule 6 (declaration -> header_declaration .)
    DEFAULT         reduce using rule 6 (declaration -> header_declaration .)
    FOR             reduce using rule 6 (declaration -> header_declaration .)
    WHILE           reduce using rule 6 (declaration -> header_declaration .)
    ECHO            reduce using rule 6 (declaration -> header_declaration .)


state 16

    (32) var_declaration2 -> AMPERSANT . ID SEMICOLON var_declaration2
    (33) var_declaration2 -> AMPERSANT . ID SEMICOLON

    ID              shift and go to state 32


state 17

    (59) iteration_stmt -> FOR . LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement

    LPAREN          shift and go to state 33


state 18

    (8) declaration -> print_stmt .
    (11) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (12) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (58) selection_stmt -> print_stmt .
    (61) iteration_stmt -> print_stmt .

  ! shift/reduce conflict for ECHO resolved as shift
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for ID resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for CLASS resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (declaration -> print_stmt .)
  ! shift/reduce conflict for ECHO resolved as shift
  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for ID resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for CLASS resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 8 (declaration -> print_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 8 (declaration -> print_stmt .)
  ! shift/reduce conflict for ECHO resolved as shift
    CLOSE_TAG       reduce using rule 8 (declaration -> print_stmt .)
    ID              reduce using rule 8 (declaration -> print_stmt .)
    AMPERSANT       reduce using rule 8 (declaration -> print_stmt .)
    FUNCTION        reduce using rule 8 (declaration -> print_stmt .)
    REQUIRE         reduce using rule 8 (declaration -> print_stmt .)
    CLASS           reduce using rule 8 (declaration -> print_stmt .)
    IF              reduce using rule 8 (declaration -> print_stmt .)
    SWITCH          reduce using rule 8 (declaration -> print_stmt .)
    CASE            reduce using rule 8 (declaration -> print_stmt .)
    DEFAULT         reduce using rule 8 (declaration -> print_stmt .)
    FOR             reduce using rule 8 (declaration -> print_stmt .)
    WHILE           reduce using rule 8 (declaration -> print_stmt .)
    ECHO            shift and go to state 34

  ! ECHO            [ reduce using rule 8 (declaration -> print_stmt .) ]
  ! CLOSE_TAG       [ reduce using rule 58 (selection_stmt -> print_stmt .) ]
  ! ID              [ reduce using rule 58 (selection_stmt -> print_stmt .) ]
  ! AMPERSANT       [ reduce using rule 58 (selection_stmt -> print_stmt .) ]
  ! FUNCTION        [ reduce using rule 58 (selection_stmt -> print_stmt .) ]
  ! REQUIRE         [ reduce using rule 58 (selection_stmt -> print_stmt .) ]
  ! CLASS           [ reduce using rule 58 (selection_stmt -> print_stmt .) ]
  ! IF              [ reduce using rule 58 (selection_stmt -> print_stmt .) ]
  ! SWITCH          [ reduce using rule 58 (selection_stmt -> print_stmt .) ]
  ! CASE            [ reduce using rule 58 (selection_stmt -> print_stmt .) ]
  ! DEFAULT         [ reduce using rule 58 (selection_stmt -> print_stmt .) ]
  ! FOR             [ reduce using rule 58 (selection_stmt -> print_stmt .) ]
  ! WHILE           [ reduce using rule 58 (selection_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 58 (selection_stmt -> print_stmt .) ]
  ! CLOSE_TAG       [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! ID              [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! AMPERSANT       [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! FUNCTION        [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! REQUIRE         [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! CLASS           [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! IF              [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! SWITCH          [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! CASE            [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! DEFAULT         [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! FOR             [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! WHILE           [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]


state 19

    (3) declaration_list -> declaration .

    CLOSE_TAG       reduce using rule 3 (declaration_list -> declaration .)
    ID              reduce using rule 3 (declaration_list -> declaration .)
    AMPERSANT       reduce using rule 3 (declaration_list -> declaration .)
    FUNCTION        reduce using rule 3 (declaration_list -> declaration .)
    REQUIRE         reduce using rule 3 (declaration_list -> declaration .)
    CLASS           reduce using rule 3 (declaration_list -> declaration .)
    IF              reduce using rule 3 (declaration_list -> declaration .)
    SWITCH          reduce using rule 3 (declaration_list -> declaration .)
    CASE            reduce using rule 3 (declaration_list -> declaration .)
    DEFAULT         reduce using rule 3 (declaration_list -> declaration .)
    FOR             reduce using rule 3 (declaration_list -> declaration .)
    WHILE           reduce using rule 3 (declaration_list -> declaration .)
    ECHO            reduce using rule 3 (declaration_list -> declaration .)


state 20

    (24) var_declaration2 -> ID . SEMICOLON var_declaration2
    (25) var_declaration2 -> ID . SEMICOLON
    (26) var_declaration2 -> ID . EQUAL NUMBER SEMICOLON var_declaration2
    (27) var_declaration2 -> ID . EQUAL NUMBER SEMICOLON
    (28) var_declaration2 -> ID . EQUAL boolean SEMICOLON var_declaration2
    (29) var_declaration2 -> ID . EQUAL boolean SEMICOLON
    (30) var_declaration2 -> ID . EQUAL ID SEMICOLON var_declaration2
    (31) var_declaration2 -> ID . EQUAL ID SEMICOLON

    SEMICOLON       shift and go to state 35
    EQUAL           shift and go to state 36


state 21

    (1) program -> OPEN_TAG declaration_list . CLOSE_TAG
    (2) declaration_list -> declaration_list . declaration
    (4) declaration -> . var_declaration2
    (5) declaration -> . fun_declaration
    (6) declaration -> . header_declaration
    (7) declaration -> . class_declaration
    (8) declaration -> . print_stmt
    (9) declaration -> . selection_stmt
    (10) declaration -> . iteration_stmt
    (24) var_declaration2 -> . ID SEMICOLON var_declaration2
    (25) var_declaration2 -> . ID SEMICOLON
    (26) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON var_declaration2
    (27) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON
    (28) var_declaration2 -> . ID EQUAL boolean SEMICOLON var_declaration2
    (29) var_declaration2 -> . ID EQUAL boolean SEMICOLON
    (30) var_declaration2 -> . ID EQUAL ID SEMICOLON var_declaration2
    (31) var_declaration2 -> . ID EQUAL ID SEMICOLON
    (32) var_declaration2 -> . AMPERSANT ID SEMICOLON var_declaration2
    (33) var_declaration2 -> . AMPERSANT ID SEMICOLON
    (34) fun_declaration -> . FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt
    (14) header_declaration -> . REQUIRE LPAREN STRING RPAREN SEMICOLON
    (15) class_declaration -> . CLASS FUNCTION_NAME class_stmt
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (55) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . print_stmt
    (59) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (60) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (61) iteration_stmt -> . print_stmt
    (100) empty -> .

  ! shift/reduce conflict for CLOSE_TAG resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
  ! shift/reduce conflict for FUNCTION resolved as shift
  ! shift/reduce conflict for REQUIRE resolved as shift
  ! shift/reduce conflict for CLASS resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
    CLOSE_TAG       shift and go to state 38
    ID              shift and go to state 20
    AMPERSANT       shift and go to state 16
    FUNCTION        shift and go to state 3
    REQUIRE         shift and go to state 5
    CLASS           shift and go to state 13
    IF              shift and go to state 12
    SWITCH          shift and go to state 10
    CASE            shift and go to state 9
    DEFAULT         shift and go to state 4
    FOR             shift and go to state 17
    WHILE           shift and go to state 6
    ECHO            reduce using rule 100 (empty -> .)

  ! CLOSE_TAG       [ reduce using rule 100 (empty -> .) ]
  ! ID              [ reduce using rule 100 (empty -> .) ]
  ! AMPERSANT       [ reduce using rule 100 (empty -> .) ]
  ! FUNCTION        [ reduce using rule 100 (empty -> .) ]
  ! REQUIRE         [ reduce using rule 100 (empty -> .) ]
  ! CLASS           [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! SWITCH          [ reduce using rule 100 (empty -> .) ]
  ! CASE            [ reduce using rule 100 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]

    header_declaration             shift and go to state 15
    print_stmt                     shift and go to state 18
    class_declaration              shift and go to state 22
    fun_declaration                shift and go to state 23
    iteration_stmt                 shift and go to state 7
    declaration                    shift and go to state 37
    var_declaration2               shift and go to state 8
    selection_stmt                 shift and go to state 11
    empty                          shift and go to state 14

state 22

    (7) declaration -> class_declaration .

    CLOSE_TAG       reduce using rule 7 (declaration -> class_declaration .)
    ID              reduce using rule 7 (declaration -> class_declaration .)
    AMPERSANT       reduce using rule 7 (declaration -> class_declaration .)
    FUNCTION        reduce using rule 7 (declaration -> class_declaration .)
    REQUIRE         reduce using rule 7 (declaration -> class_declaration .)
    CLASS           reduce using rule 7 (declaration -> class_declaration .)
    IF              reduce using rule 7 (declaration -> class_declaration .)
    SWITCH          reduce using rule 7 (declaration -> class_declaration .)
    CASE            reduce using rule 7 (declaration -> class_declaration .)
    DEFAULT         reduce using rule 7 (declaration -> class_declaration .)
    FOR             reduce using rule 7 (declaration -> class_declaration .)
    WHILE           reduce using rule 7 (declaration -> class_declaration .)
    ECHO            reduce using rule 7 (declaration -> class_declaration .)


state 23

    (5) declaration -> fun_declaration .

    CLOSE_TAG       reduce using rule 5 (declaration -> fun_declaration .)
    ID              reduce using rule 5 (declaration -> fun_declaration .)
    AMPERSANT       reduce using rule 5 (declaration -> fun_declaration .)
    FUNCTION        reduce using rule 5 (declaration -> fun_declaration .)
    REQUIRE         reduce using rule 5 (declaration -> fun_declaration .)
    CLASS           reduce using rule 5 (declaration -> fun_declaration .)
    IF              reduce using rule 5 (declaration -> fun_declaration .)
    SWITCH          reduce using rule 5 (declaration -> fun_declaration .)
    CASE            reduce using rule 5 (declaration -> fun_declaration .)
    DEFAULT         reduce using rule 5 (declaration -> fun_declaration .)
    FOR             reduce using rule 5 (declaration -> fun_declaration .)
    WHILE           reduce using rule 5 (declaration -> fun_declaration .)
    ECHO            reduce using rule 5 (declaration -> fun_declaration .)


state 24

    (34) fun_declaration -> FUNCTION FUNCTION_NAME . LPAREN params RPAREN compount_stmt

    LPAREN          shift and go to state 39


state 25

    (57) selection_stmt -> DEFAULT COLON . statement BREAK SEMICOLON
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . return_stmt
    (51) expression_stmt -> . expression SEMICOLON
    (52) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (55) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . print_stmt
    (59) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (60) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (61) iteration_stmt -> . print_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (100) empty -> .
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    SEMICOLON       shift and go to state 47
    LBLOCK          shift and go to state 43
    IF              shift and go to state 12
    SWITCH          shift and go to state 10
    CASE            shift and go to state 9
    DEFAULT         shift and go to state 4
    FOR             shift and go to state 17
    WHILE           shift and go to state 6
    RETURN          shift and go to state 40
    ID              shift and go to state 57
    ECHO            reduce using rule 100 (empty -> .)
    BREAK           reduce using rule 100 (empty -> .)
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

    boolean                        shift and go to state 60
    iteration_stmt                 shift and go to state 61
    simple_expression              shift and go to state 44
    additive_expression            shift and go to state 46
    call                           shift and go to state 48
    statement                      shift and go to state 50
    factor                         shift and go to state 51
    var                            shift and go to state 52
    expression_stmt                shift and go to state 49
    empty                          shift and go to state 14
    print_stmt                     shift and go to state 54
    compount_stmt                  shift and go to state 55
    selection_stmt                 shift and go to state 53
    term                           shift and go to state 58
    return_stmt                    shift and go to state 42
    expression                     shift and go to state 62

state 26

    (14) header_declaration -> REQUIRE LPAREN . STRING RPAREN SEMICOLON

    STRING          shift and go to state 63


state 27

    (60) iteration_stmt -> WHILE LPAREN . expression RPAREN statement
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

    term                           shift and go to state 58
    boolean                        shift and go to state 60
    call                           shift and go to state 48
    factor                         shift and go to state 51
    var                            shift and go to state 52
    simple_expression              shift and go to state 44
    expression                     shift and go to state 64
    additive_expression            shift and go to state 46

state 28

    (56) selection_stmt -> CASE NUMBER . COLON statement BREAK SEMICOLON

    COLON           shift and go to state 65


state 29

    (55) selection_stmt -> SWITCH LPAREN . var RPAREN statement
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET

    ID              shift and go to state 67

    var                            shift and go to state 66

state 30

    (53) selection_stmt -> IF LPAREN . expression RPAREN statement
    (54) selection_stmt -> IF LPAREN . expression RPAREN statement ELSE statement
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

    term                           shift and go to state 58
    boolean                        shift and go to state 60
    call                           shift and go to state 48
    factor                         shift and go to state 51
    var                            shift and go to state 52
    simple_expression              shift and go to state 44
    expression                     shift and go to state 68
    additive_expression            shift and go to state 46

state 31

    (15) class_declaration -> CLASS FUNCTION_NAME . class_stmt
    (16) class_stmt -> . LBLOCK print_stmt attributes print_stmt methods print_stmt RBLOCK

    LBLOCK          shift and go to state 70

    class_stmt                     shift and go to state 69

state 32

    (32) var_declaration2 -> AMPERSANT ID . SEMICOLON var_declaration2
    (33) var_declaration2 -> AMPERSANT ID . SEMICOLON

    SEMICOLON       shift and go to state 71


state 33

    (59) iteration_stmt -> FOR LPAREN . var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (24) var_declaration2 -> . ID SEMICOLON var_declaration2
    (25) var_declaration2 -> . ID SEMICOLON
    (26) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON var_declaration2
    (27) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON
    (28) var_declaration2 -> . ID EQUAL boolean SEMICOLON var_declaration2
    (29) var_declaration2 -> . ID EQUAL boolean SEMICOLON
    (30) var_declaration2 -> . ID EQUAL ID SEMICOLON var_declaration2
    (31) var_declaration2 -> . ID EQUAL ID SEMICOLON
    (32) var_declaration2 -> . AMPERSANT ID SEMICOLON var_declaration2
    (33) var_declaration2 -> . AMPERSANT ID SEMICOLON

    ID              shift and go to state 20
    AMPERSANT       shift and go to state 16

    var_declaration2               shift and go to state 72

state 34

    (11) print_stmt -> print_stmt ECHO . STRING SEMICOLON
    (12) print_stmt -> print_stmt ECHO . ID SEMICOLON

    STRING          shift and go to state 74
    ID              shift and go to state 73


state 35

    (24) var_declaration2 -> ID SEMICOLON . var_declaration2
    (25) var_declaration2 -> ID SEMICOLON .
    (24) var_declaration2 -> . ID SEMICOLON var_declaration2
    (25) var_declaration2 -> . ID SEMICOLON
    (26) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON var_declaration2
    (27) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON
    (28) var_declaration2 -> . ID EQUAL boolean SEMICOLON var_declaration2
    (29) var_declaration2 -> . ID EQUAL boolean SEMICOLON
    (30) var_declaration2 -> . ID EQUAL ID SEMICOLON var_declaration2
    (31) var_declaration2 -> . ID EQUAL ID SEMICOLON
    (32) var_declaration2 -> . AMPERSANT ID SEMICOLON var_declaration2
    (33) var_declaration2 -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    ECHO            reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    SEMICOLON       reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    LBLOCK          reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    IF              reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    SWITCH          reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    CASE            reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    DEFAULT         reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    FOR             reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    WHILE           reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    RETURN          reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    LPAREN          reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    NUMBER          reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    TRUE            reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    FALSE           reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    RBLOCK          reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    CLOSE_TAG       reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    FUNCTION        reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    REQUIRE         reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    CLASS           reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    PRIVATE         reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    PUBLIC          reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    PROTECTED       reduce using rule 25 (var_declaration2 -> ID SEMICOLON .)
    ID              shift and go to state 20
    AMPERSANT       shift and go to state 16

  ! ID              [ reduce using rule 25 (var_declaration2 -> ID SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 25 (var_declaration2 -> ID SEMICOLON .) ]

    var_declaration2               shift and go to state 75

state 36

    (26) var_declaration2 -> ID EQUAL . NUMBER SEMICOLON var_declaration2
    (27) var_declaration2 -> ID EQUAL . NUMBER SEMICOLON
    (28) var_declaration2 -> ID EQUAL . boolean SEMICOLON var_declaration2
    (29) var_declaration2 -> ID EQUAL . boolean SEMICOLON
    (30) var_declaration2 -> ID EQUAL . ID SEMICOLON var_declaration2
    (31) var_declaration2 -> ID EQUAL . ID SEMICOLON
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    NUMBER          shift and go to state 76
    ID              shift and go to state 78
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

    boolean                        shift and go to state 77

state 37

    (2) declaration_list -> declaration_list declaration .

    CLOSE_TAG       reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ID              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    AMPERSANT       reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FUNCTION        reduce using rule 2 (declaration_list -> declaration_list declaration .)
    REQUIRE         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CLASS           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    IF              reduce using rule 2 (declaration_list -> declaration_list declaration .)
    SWITCH          reduce using rule 2 (declaration_list -> declaration_list declaration .)
    CASE            reduce using rule 2 (declaration_list -> declaration_list declaration .)
    DEFAULT         reduce using rule 2 (declaration_list -> declaration_list declaration .)
    FOR             reduce using rule 2 (declaration_list -> declaration_list declaration .)
    WHILE           reduce using rule 2 (declaration_list -> declaration_list declaration .)
    ECHO            reduce using rule 2 (declaration_list -> declaration_list declaration .)


state 38

    (1) program -> OPEN_TAG declaration_list CLOSE_TAG .

    $end            reduce using rule 1 (program -> OPEN_TAG declaration_list CLOSE_TAG .)


state 39

    (34) fun_declaration -> FUNCTION FUNCTION_NAME LPAREN . params RPAREN compount_stmt
    (35) params -> . param_list
    (36) params -> . empty
    (37) param_list -> . param_list COMMA param
    (38) param_list -> . param
    (100) empty -> .
    (39) param -> . ID
    (40) param -> . ID LBRACKET RBRACKET

    RPAREN          reduce using rule 100 (empty -> .)
    ID              shift and go to state 82

    param_list                     shift and go to state 79
    param                          shift and go to state 80
    params                         shift and go to state 81
    empty                          shift and go to state 83

state 40

    (62) return_stmt -> RETURN . SEMICOLON
    (63) return_stmt -> RETURN . expression SEMICOLON
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    SEMICOLON       shift and go to state 84
    ID              shift and go to state 57
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

    term                           shift and go to state 58
    boolean                        shift and go to state 60
    call                           shift and go to state 48
    factor                         shift and go to state 51
    var                            shift and go to state 52
    simple_expression              shift and go to state 44
    expression                     shift and go to state 85
    additive_expression            shift and go to state 46

state 41

    (91) factor -> NUMBER .

    MINUSMINUS      reduce using rule 91 (factor -> NUMBER .)
    PLUSPLUS        reduce using rule 91 (factor -> NUMBER .)
    TIMES           reduce using rule 91 (factor -> NUMBER .)
    DIVIDE          reduce using rule 91 (factor -> NUMBER .)
    LESS            reduce using rule 91 (factor -> NUMBER .)
    LESSEQUAL       reduce using rule 91 (factor -> NUMBER .)
    GREATER         reduce using rule 91 (factor -> NUMBER .)
    GREATEREQUAL    reduce using rule 91 (factor -> NUMBER .)
    DEQUAL          reduce using rule 91 (factor -> NUMBER .)
    DISTINT         reduce using rule 91 (factor -> NUMBER .)
    ISEQUAL         reduce using rule 91 (factor -> NUMBER .)
    PLUS            reduce using rule 91 (factor -> NUMBER .)
    MINUS           reduce using rule 91 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 91 (factor -> NUMBER .)
    RPAREN          reduce using rule 91 (factor -> NUMBER .)
    RBRACKET        reduce using rule 91 (factor -> NUMBER .)
    COMMA           reduce using rule 91 (factor -> NUMBER .)


state 42

    (50) statement -> return_stmt .

    CLOSE_TAG       reduce using rule 50 (statement -> return_stmt .)
    ID              reduce using rule 50 (statement -> return_stmt .)
    AMPERSANT       reduce using rule 50 (statement -> return_stmt .)
    FUNCTION        reduce using rule 50 (statement -> return_stmt .)
    REQUIRE         reduce using rule 50 (statement -> return_stmt .)
    CLASS           reduce using rule 50 (statement -> return_stmt .)
    IF              reduce using rule 50 (statement -> return_stmt .)
    SWITCH          reduce using rule 50 (statement -> return_stmt .)
    CASE            reduce using rule 50 (statement -> return_stmt .)
    DEFAULT         reduce using rule 50 (statement -> return_stmt .)
    FOR             reduce using rule 50 (statement -> return_stmt .)
    WHILE           reduce using rule 50 (statement -> return_stmt .)
    ECHO            reduce using rule 50 (statement -> return_stmt .)
    BREAK           reduce using rule 50 (statement -> return_stmt .)
    ELSE            reduce using rule 50 (statement -> return_stmt .)
    SEMICOLON       reduce using rule 50 (statement -> return_stmt .)
    LBLOCK          reduce using rule 50 (statement -> return_stmt .)
    RETURN          reduce using rule 50 (statement -> return_stmt .)
    LPAREN          reduce using rule 50 (statement -> return_stmt .)
    NUMBER          reduce using rule 50 (statement -> return_stmt .)
    TRUE            reduce using rule 50 (statement -> return_stmt .)
    FALSE           reduce using rule 50 (statement -> return_stmt .)
    RBLOCK          reduce using rule 50 (statement -> return_stmt .)


state 43

    (41) compount_stmt -> LBLOCK . print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (100) empty -> .

    ECHO            reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    AMPERSANT       reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    LBLOCK          reduce using rule 100 (empty -> .)
    IF              reduce using rule 100 (empty -> .)
    SWITCH          reduce using rule 100 (empty -> .)
    CASE            reduce using rule 100 (empty -> .)
    DEFAULT         reduce using rule 100 (empty -> .)
    FOR             reduce using rule 100 (empty -> .)
    WHILE           reduce using rule 100 (empty -> .)
    RETURN          reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    NUMBER          reduce using rule 100 (empty -> .)
    TRUE            reduce using rule 100 (empty -> .)
    FALSE           reduce using rule 100 (empty -> .)
    RBLOCK          reduce using rule 100 (empty -> .)

    print_stmt                     shift and go to state 86
    empty                          shift and go to state 14

state 44

    (65) expression -> simple_expression .

    SEMICOLON       reduce using rule 65 (expression -> simple_expression .)
    COMMA           reduce using rule 65 (expression -> simple_expression .)
    RPAREN          reduce using rule 65 (expression -> simple_expression .)
    RBRACKET        reduce using rule 65 (expression -> simple_expression .)


state 45

    (98) boolean -> TRUE .

    MINUSMINUS      reduce using rule 98 (boolean -> TRUE .)
    PLUSPLUS        reduce using rule 98 (boolean -> TRUE .)
    TIMES           reduce using rule 98 (boolean -> TRUE .)
    DIVIDE          reduce using rule 98 (boolean -> TRUE .)
    LESS            reduce using rule 98 (boolean -> TRUE .)
    LESSEQUAL       reduce using rule 98 (boolean -> TRUE .)
    GREATER         reduce using rule 98 (boolean -> TRUE .)
    GREATEREQUAL    reduce using rule 98 (boolean -> TRUE .)
    DEQUAL          reduce using rule 98 (boolean -> TRUE .)
    DISTINT         reduce using rule 98 (boolean -> TRUE .)
    ISEQUAL         reduce using rule 98 (boolean -> TRUE .)
    PLUS            reduce using rule 98 (boolean -> TRUE .)
    MINUS           reduce using rule 98 (boolean -> TRUE .)
    SEMICOLON       reduce using rule 98 (boolean -> TRUE .)
    COMMA           reduce using rule 98 (boolean -> TRUE .)
    RPAREN          reduce using rule 98 (boolean -> TRUE .)
    RBRACKET        reduce using rule 98 (boolean -> TRUE .)


state 46

    (69) simple_expression -> additive_expression . relop additive_expression
    (70) simple_expression -> additive_expression .
    (78) additive_expression -> additive_expression . addop term
    (71) relop -> . LESS
    (72) relop -> . LESSEQUAL
    (73) relop -> . GREATER
    (74) relop -> . GREATEREQUAL
    (75) relop -> . DEQUAL
    (76) relop -> . DISTINT
    (77) relop -> . ISEQUAL
    (82) addop -> . PLUS
    (83) addop -> . MINUS

    RPAREN          reduce using rule 70 (simple_expression -> additive_expression .)
    SEMICOLON       reduce using rule 70 (simple_expression -> additive_expression .)
    RBRACKET        reduce using rule 70 (simple_expression -> additive_expression .)
    COMMA           reduce using rule 70 (simple_expression -> additive_expression .)
    LESS            shift and go to state 89
    LESSEQUAL       shift and go to state 95
    GREATER         shift and go to state 97
    GREATEREQUAL    shift and go to state 92
    DEQUAL          shift and go to state 90
    DISTINT         shift and go to state 91
    ISEQUAL         shift and go to state 94
    PLUS            shift and go to state 93
    MINUS           shift and go to state 96

    addop                          shift and go to state 87
    relop                          shift and go to state 88

state 47

    (52) expression_stmt -> SEMICOLON .

    CLOSE_TAG       reduce using rule 52 (expression_stmt -> SEMICOLON .)
    ID              reduce using rule 52 (expression_stmt -> SEMICOLON .)
    AMPERSANT       reduce using rule 52 (expression_stmt -> SEMICOLON .)
    FUNCTION        reduce using rule 52 (expression_stmt -> SEMICOLON .)
    REQUIRE         reduce using rule 52 (expression_stmt -> SEMICOLON .)
    CLASS           reduce using rule 52 (expression_stmt -> SEMICOLON .)
    IF              reduce using rule 52 (expression_stmt -> SEMICOLON .)
    SWITCH          reduce using rule 52 (expression_stmt -> SEMICOLON .)
    CASE            reduce using rule 52 (expression_stmt -> SEMICOLON .)
    DEFAULT         reduce using rule 52 (expression_stmt -> SEMICOLON .)
    FOR             reduce using rule 52 (expression_stmt -> SEMICOLON .)
    WHILE           reduce using rule 52 (expression_stmt -> SEMICOLON .)
    ECHO            reduce using rule 52 (expression_stmt -> SEMICOLON .)
    BREAK           reduce using rule 52 (expression_stmt -> SEMICOLON .)
    ELSE            reduce using rule 52 (expression_stmt -> SEMICOLON .)
    SEMICOLON       reduce using rule 52 (expression_stmt -> SEMICOLON .)
    LBLOCK          reduce using rule 52 (expression_stmt -> SEMICOLON .)
    RETURN          reduce using rule 52 (expression_stmt -> SEMICOLON .)
    LPAREN          reduce using rule 52 (expression_stmt -> SEMICOLON .)
    NUMBER          reduce using rule 52 (expression_stmt -> SEMICOLON .)
    TRUE            reduce using rule 52 (expression_stmt -> SEMICOLON .)
    FALSE           reduce using rule 52 (expression_stmt -> SEMICOLON .)
    RBLOCK          reduce using rule 52 (expression_stmt -> SEMICOLON .)


state 48

    (90) factor -> call .

    MINUSMINUS      reduce using rule 90 (factor -> call .)
    PLUSPLUS        reduce using rule 90 (factor -> call .)
    TIMES           reduce using rule 90 (factor -> call .)
    DIVIDE          reduce using rule 90 (factor -> call .)
    LESS            reduce using rule 90 (factor -> call .)
    LESSEQUAL       reduce using rule 90 (factor -> call .)
    GREATER         reduce using rule 90 (factor -> call .)
    GREATEREQUAL    reduce using rule 90 (factor -> call .)
    DEQUAL          reduce using rule 90 (factor -> call .)
    DISTINT         reduce using rule 90 (factor -> call .)
    ISEQUAL         reduce using rule 90 (factor -> call .)
    PLUS            reduce using rule 90 (factor -> call .)
    MINUS           reduce using rule 90 (factor -> call .)
    SEMICOLON       reduce using rule 90 (factor -> call .)
    RPAREN          reduce using rule 90 (factor -> call .)
    RBRACKET        reduce using rule 90 (factor -> call .)
    COMMA           reduce using rule 90 (factor -> call .)


state 49

    (46) statement -> expression_stmt .

    CLOSE_TAG       reduce using rule 46 (statement -> expression_stmt .)
    ID              reduce using rule 46 (statement -> expression_stmt .)
    AMPERSANT       reduce using rule 46 (statement -> expression_stmt .)
    FUNCTION        reduce using rule 46 (statement -> expression_stmt .)
    REQUIRE         reduce using rule 46 (statement -> expression_stmt .)
    CLASS           reduce using rule 46 (statement -> expression_stmt .)
    IF              reduce using rule 46 (statement -> expression_stmt .)
    SWITCH          reduce using rule 46 (statement -> expression_stmt .)
    CASE            reduce using rule 46 (statement -> expression_stmt .)
    DEFAULT         reduce using rule 46 (statement -> expression_stmt .)
    FOR             reduce using rule 46 (statement -> expression_stmt .)
    WHILE           reduce using rule 46 (statement -> expression_stmt .)
    ECHO            reduce using rule 46 (statement -> expression_stmt .)
    BREAK           reduce using rule 46 (statement -> expression_stmt .)
    ELSE            reduce using rule 46 (statement -> expression_stmt .)
    SEMICOLON       reduce using rule 46 (statement -> expression_stmt .)
    LBLOCK          reduce using rule 46 (statement -> expression_stmt .)
    RETURN          reduce using rule 46 (statement -> expression_stmt .)
    LPAREN          reduce using rule 46 (statement -> expression_stmt .)
    NUMBER          reduce using rule 46 (statement -> expression_stmt .)
    TRUE            reduce using rule 46 (statement -> expression_stmt .)
    FALSE           reduce using rule 46 (statement -> expression_stmt .)
    RBLOCK          reduce using rule 46 (statement -> expression_stmt .)


state 50

    (57) selection_stmt -> DEFAULT COLON statement . BREAK SEMICOLON

    BREAK           shift and go to state 98


state 51

    (85) term -> factor .

    MINUSMINUS      reduce using rule 85 (term -> factor .)
    PLUSPLUS        reduce using rule 85 (term -> factor .)
    TIMES           reduce using rule 85 (term -> factor .)
    DIVIDE          reduce using rule 85 (term -> factor .)
    PLUS            reduce using rule 85 (term -> factor .)
    MINUS           reduce using rule 85 (term -> factor .)
    SEMICOLON       reduce using rule 85 (term -> factor .)
    RPAREN          reduce using rule 85 (term -> factor .)
    RBRACKET        reduce using rule 85 (term -> factor .)
    COMMA           reduce using rule 85 (term -> factor .)
    LESS            reduce using rule 85 (term -> factor .)
    LESSEQUAL       reduce using rule 85 (term -> factor .)
    GREATER         reduce using rule 85 (term -> factor .)
    GREATEREQUAL    reduce using rule 85 (term -> factor .)
    DEQUAL          reduce using rule 85 (term -> factor .)
    DISTINT         reduce using rule 85 (term -> factor .)
    ISEQUAL         reduce using rule 85 (term -> factor .)


state 52

    (64) expression -> var . EQUAL expression
    (66) expression -> var . EQUAL AMPERSANT ID
    (89) factor -> var .

    EQUAL           shift and go to state 99
    MINUSMINUS      reduce using rule 89 (factor -> var .)
    PLUSPLUS        reduce using rule 89 (factor -> var .)
    TIMES           reduce using rule 89 (factor -> var .)
    DIVIDE          reduce using rule 89 (factor -> var .)
    LESS            reduce using rule 89 (factor -> var .)
    LESSEQUAL       reduce using rule 89 (factor -> var .)
    GREATER         reduce using rule 89 (factor -> var .)
    GREATEREQUAL    reduce using rule 89 (factor -> var .)
    DEQUAL          reduce using rule 89 (factor -> var .)
    DISTINT         reduce using rule 89 (factor -> var .)
    ISEQUAL         reduce using rule 89 (factor -> var .)
    PLUS            reduce using rule 89 (factor -> var .)
    MINUS           reduce using rule 89 (factor -> var .)
    RBRACKET        reduce using rule 89 (factor -> var .)
    RPAREN          reduce using rule 89 (factor -> var .)
    SEMICOLON       reduce using rule 89 (factor -> var .)
    COMMA           reduce using rule 89 (factor -> var .)


state 53

    (48) statement -> selection_stmt .

    CLOSE_TAG       reduce using rule 48 (statement -> selection_stmt .)
    ID              reduce using rule 48 (statement -> selection_stmt .)
    AMPERSANT       reduce using rule 48 (statement -> selection_stmt .)
    FUNCTION        reduce using rule 48 (statement -> selection_stmt .)
    REQUIRE         reduce using rule 48 (statement -> selection_stmt .)
    CLASS           reduce using rule 48 (statement -> selection_stmt .)
    IF              reduce using rule 48 (statement -> selection_stmt .)
    SWITCH          reduce using rule 48 (statement -> selection_stmt .)
    CASE            reduce using rule 48 (statement -> selection_stmt .)
    DEFAULT         reduce using rule 48 (statement -> selection_stmt .)
    FOR             reduce using rule 48 (statement -> selection_stmt .)
    WHILE           reduce using rule 48 (statement -> selection_stmt .)
    ECHO            reduce using rule 48 (statement -> selection_stmt .)
    BREAK           reduce using rule 48 (statement -> selection_stmt .)
    ELSE            reduce using rule 48 (statement -> selection_stmt .)
    SEMICOLON       reduce using rule 48 (statement -> selection_stmt .)
    LBLOCK          reduce using rule 48 (statement -> selection_stmt .)
    RETURN          reduce using rule 48 (statement -> selection_stmt .)
    LPAREN          reduce using rule 48 (statement -> selection_stmt .)
    NUMBER          reduce using rule 48 (statement -> selection_stmt .)
    TRUE            reduce using rule 48 (statement -> selection_stmt .)
    FALSE           reduce using rule 48 (statement -> selection_stmt .)
    RBLOCK          reduce using rule 48 (statement -> selection_stmt .)


state 54

    (58) selection_stmt -> print_stmt .
    (61) iteration_stmt -> print_stmt .
    (11) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (12) print_stmt -> print_stmt . ECHO ID SEMICOLON

  ! reduce/reduce conflict for CLOSE_TAG resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for ID resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for AMPERSANT resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FUNCTION resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for REQUIRE resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for CLASS resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for ECHO resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for BREAK resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for ELSE resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for SEMICOLON resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for LBLOCK resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for RETURN resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for LPAREN resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for NUMBER resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for TRUE resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FALSE resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for RBLOCK resolved using rule 58 (selection_stmt -> print_stmt .)
  ! shift/reduce conflict for ECHO resolved as shift
    BREAK           reduce using rule 58 (selection_stmt -> print_stmt .)
    CLOSE_TAG       reduce using rule 58 (selection_stmt -> print_stmt .)
    ID              reduce using rule 58 (selection_stmt -> print_stmt .)
    AMPERSANT       reduce using rule 58 (selection_stmt -> print_stmt .)
    FUNCTION        reduce using rule 58 (selection_stmt -> print_stmt .)
    REQUIRE         reduce using rule 58 (selection_stmt -> print_stmt .)
    CLASS           reduce using rule 58 (selection_stmt -> print_stmt .)
    IF              reduce using rule 58 (selection_stmt -> print_stmt .)
    SWITCH          reduce using rule 58 (selection_stmt -> print_stmt .)
    CASE            reduce using rule 58 (selection_stmt -> print_stmt .)
    DEFAULT         reduce using rule 58 (selection_stmt -> print_stmt .)
    FOR             reduce using rule 58 (selection_stmt -> print_stmt .)
    WHILE           reduce using rule 58 (selection_stmt -> print_stmt .)
    ELSE            reduce using rule 58 (selection_stmt -> print_stmt .)
    SEMICOLON       reduce using rule 58 (selection_stmt -> print_stmt .)
    LBLOCK          reduce using rule 58 (selection_stmt -> print_stmt .)
    RETURN          reduce using rule 58 (selection_stmt -> print_stmt .)
    LPAREN          reduce using rule 58 (selection_stmt -> print_stmt .)
    NUMBER          reduce using rule 58 (selection_stmt -> print_stmt .)
    TRUE            reduce using rule 58 (selection_stmt -> print_stmt .)
    FALSE           reduce using rule 58 (selection_stmt -> print_stmt .)
    RBLOCK          reduce using rule 58 (selection_stmt -> print_stmt .)
    ECHO            shift and go to state 34

  ! ECHO            [ reduce using rule 58 (selection_stmt -> print_stmt .) ]
  ! CLOSE_TAG       [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! ID              [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! AMPERSANT       [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! FUNCTION        [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! REQUIRE         [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! CLASS           [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! IF              [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! SWITCH          [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! CASE            [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! DEFAULT         [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! FOR             [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! WHILE           [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! BREAK           [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! ELSE            [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! SEMICOLON       [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! LBLOCK          [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! RETURN          [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! LPAREN          [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! NUMBER          [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! TRUE            [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! FALSE           [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! RBLOCK          [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]


state 55

    (47) statement -> compount_stmt .

    CLOSE_TAG       reduce using rule 47 (statement -> compount_stmt .)
    ID              reduce using rule 47 (statement -> compount_stmt .)
    AMPERSANT       reduce using rule 47 (statement -> compount_stmt .)
    FUNCTION        reduce using rule 47 (statement -> compount_stmt .)
    REQUIRE         reduce using rule 47 (statement -> compount_stmt .)
    CLASS           reduce using rule 47 (statement -> compount_stmt .)
    IF              reduce using rule 47 (statement -> compount_stmt .)
    SWITCH          reduce using rule 47 (statement -> compount_stmt .)
    CASE            reduce using rule 47 (statement -> compount_stmt .)
    DEFAULT         reduce using rule 47 (statement -> compount_stmt .)
    FOR             reduce using rule 47 (statement -> compount_stmt .)
    WHILE           reduce using rule 47 (statement -> compount_stmt .)
    ECHO            reduce using rule 47 (statement -> compount_stmt .)
    BREAK           reduce using rule 47 (statement -> compount_stmt .)
    ELSE            reduce using rule 47 (statement -> compount_stmt .)
    SEMICOLON       reduce using rule 47 (statement -> compount_stmt .)
    LBLOCK          reduce using rule 47 (statement -> compount_stmt .)
    RETURN          reduce using rule 47 (statement -> compount_stmt .)
    LPAREN          reduce using rule 47 (statement -> compount_stmt .)
    NUMBER          reduce using rule 47 (statement -> compount_stmt .)
    TRUE            reduce using rule 47 (statement -> compount_stmt .)
    FALSE           reduce using rule 47 (statement -> compount_stmt .)
    RBLOCK          reduce using rule 47 (statement -> compount_stmt .)


state 56

    (88) factor -> LPAREN . expression RPAREN
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

    term                           shift and go to state 58
    boolean                        shift and go to state 60
    call                           shift and go to state 48
    factor                         shift and go to state 51
    var                            shift and go to state 52
    simple_expression              shift and go to state 44
    expression                     shift and go to state 100
    additive_expression            shift and go to state 46

state 57

    (67) var -> ID .
    (68) var -> ID . LBRACKET expression RBRACKET
    (93) call -> ID . LPAREN args RPAREN

    EQUAL           reduce using rule 67 (var -> ID .)
    MINUSMINUS      reduce using rule 67 (var -> ID .)
    PLUSPLUS        reduce using rule 67 (var -> ID .)
    TIMES           reduce using rule 67 (var -> ID .)
    DIVIDE          reduce using rule 67 (var -> ID .)
    LESS            reduce using rule 67 (var -> ID .)
    LESSEQUAL       reduce using rule 67 (var -> ID .)
    GREATER         reduce using rule 67 (var -> ID .)
    GREATEREQUAL    reduce using rule 67 (var -> ID .)
    DEQUAL          reduce using rule 67 (var -> ID .)
    DISTINT         reduce using rule 67 (var -> ID .)
    ISEQUAL         reduce using rule 67 (var -> ID .)
    PLUS            reduce using rule 67 (var -> ID .)
    MINUS           reduce using rule 67 (var -> ID .)
    RPAREN          reduce using rule 67 (var -> ID .)
    SEMICOLON       reduce using rule 67 (var -> ID .)
    RBRACKET        reduce using rule 67 (var -> ID .)
    COMMA           reduce using rule 67 (var -> ID .)
    LBRACKET        shift and go to state 101
    LPAREN          shift and go to state 102


state 58

    (79) additive_expression -> term .
    (80) additive_expression -> term . MINUSMINUS
    (81) additive_expression -> term . PLUSPLUS
    (84) term -> term . mulop factor
    (86) mulop -> . TIMES
    (87) mulop -> . DIVIDE

    LESS            reduce using rule 79 (additive_expression -> term .)
    LESSEQUAL       reduce using rule 79 (additive_expression -> term .)
    GREATER         reduce using rule 79 (additive_expression -> term .)
    GREATEREQUAL    reduce using rule 79 (additive_expression -> term .)
    DEQUAL          reduce using rule 79 (additive_expression -> term .)
    DISTINT         reduce using rule 79 (additive_expression -> term .)
    ISEQUAL         reduce using rule 79 (additive_expression -> term .)
    PLUS            reduce using rule 79 (additive_expression -> term .)
    MINUS           reduce using rule 79 (additive_expression -> term .)
    SEMICOLON       reduce using rule 79 (additive_expression -> term .)
    RPAREN          reduce using rule 79 (additive_expression -> term .)
    RBRACKET        reduce using rule 79 (additive_expression -> term .)
    COMMA           reduce using rule 79 (additive_expression -> term .)
    MINUSMINUS      shift and go to state 107
    PLUSPLUS        shift and go to state 104
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 103

    mulop                          shift and go to state 106

state 59

    (99) boolean -> FALSE .

    MINUSMINUS      reduce using rule 99 (boolean -> FALSE .)
    PLUSPLUS        reduce using rule 99 (boolean -> FALSE .)
    TIMES           reduce using rule 99 (boolean -> FALSE .)
    DIVIDE          reduce using rule 99 (boolean -> FALSE .)
    LESS            reduce using rule 99 (boolean -> FALSE .)
    LESSEQUAL       reduce using rule 99 (boolean -> FALSE .)
    GREATER         reduce using rule 99 (boolean -> FALSE .)
    GREATEREQUAL    reduce using rule 99 (boolean -> FALSE .)
    DEQUAL          reduce using rule 99 (boolean -> FALSE .)
    DISTINT         reduce using rule 99 (boolean -> FALSE .)
    ISEQUAL         reduce using rule 99 (boolean -> FALSE .)
    PLUS            reduce using rule 99 (boolean -> FALSE .)
    MINUS           reduce using rule 99 (boolean -> FALSE .)
    SEMICOLON       reduce using rule 99 (boolean -> FALSE .)
    COMMA           reduce using rule 99 (boolean -> FALSE .)
    RPAREN          reduce using rule 99 (boolean -> FALSE .)
    RBRACKET        reduce using rule 99 (boolean -> FALSE .)


state 60

    (92) factor -> boolean .

    MINUSMINUS      reduce using rule 92 (factor -> boolean .)
    PLUSPLUS        reduce using rule 92 (factor -> boolean .)
    TIMES           reduce using rule 92 (factor -> boolean .)
    DIVIDE          reduce using rule 92 (factor -> boolean .)
    LESS            reduce using rule 92 (factor -> boolean .)
    LESSEQUAL       reduce using rule 92 (factor -> boolean .)
    GREATER         reduce using rule 92 (factor -> boolean .)
    GREATEREQUAL    reduce using rule 92 (factor -> boolean .)
    DEQUAL          reduce using rule 92 (factor -> boolean .)
    DISTINT         reduce using rule 92 (factor -> boolean .)
    ISEQUAL         reduce using rule 92 (factor -> boolean .)
    PLUS            reduce using rule 92 (factor -> boolean .)
    MINUS           reduce using rule 92 (factor -> boolean .)
    SEMICOLON       reduce using rule 92 (factor -> boolean .)
    RPAREN          reduce using rule 92 (factor -> boolean .)
    RBRACKET        reduce using rule 92 (factor -> boolean .)
    COMMA           reduce using rule 92 (factor -> boolean .)


state 61

    (49) statement -> iteration_stmt .

    CLOSE_TAG       reduce using rule 49 (statement -> iteration_stmt .)
    ID              reduce using rule 49 (statement -> iteration_stmt .)
    AMPERSANT       reduce using rule 49 (statement -> iteration_stmt .)
    FUNCTION        reduce using rule 49 (statement -> iteration_stmt .)
    REQUIRE         reduce using rule 49 (statement -> iteration_stmt .)
    CLASS           reduce using rule 49 (statement -> iteration_stmt .)
    IF              reduce using rule 49 (statement -> iteration_stmt .)
    SWITCH          reduce using rule 49 (statement -> iteration_stmt .)
    CASE            reduce using rule 49 (statement -> iteration_stmt .)
    DEFAULT         reduce using rule 49 (statement -> iteration_stmt .)
    FOR             reduce using rule 49 (statement -> iteration_stmt .)
    WHILE           reduce using rule 49 (statement -> iteration_stmt .)
    ECHO            reduce using rule 49 (statement -> iteration_stmt .)
    BREAK           reduce using rule 49 (statement -> iteration_stmt .)
    ELSE            reduce using rule 49 (statement -> iteration_stmt .)
    SEMICOLON       reduce using rule 49 (statement -> iteration_stmt .)
    LBLOCK          reduce using rule 49 (statement -> iteration_stmt .)
    RETURN          reduce using rule 49 (statement -> iteration_stmt .)
    LPAREN          reduce using rule 49 (statement -> iteration_stmt .)
    NUMBER          reduce using rule 49 (statement -> iteration_stmt .)
    TRUE            reduce using rule 49 (statement -> iteration_stmt .)
    FALSE           reduce using rule 49 (statement -> iteration_stmt .)
    RBLOCK          reduce using rule 49 (statement -> iteration_stmt .)


state 62

    (51) expression_stmt -> expression . SEMICOLON

    SEMICOLON       shift and go to state 108


state 63

    (14) header_declaration -> REQUIRE LPAREN STRING . RPAREN SEMICOLON

    RPAREN          shift and go to state 109


state 64

    (60) iteration_stmt -> WHILE LPAREN expression . RPAREN statement

    RPAREN          shift and go to state 110


state 65

    (56) selection_stmt -> CASE NUMBER COLON . statement BREAK SEMICOLON
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . return_stmt
    (51) expression_stmt -> . expression SEMICOLON
    (52) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (55) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . print_stmt
    (59) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (60) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (61) iteration_stmt -> . print_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (100) empty -> .
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    SEMICOLON       shift and go to state 47
    LBLOCK          shift and go to state 43
    IF              shift and go to state 12
    SWITCH          shift and go to state 10
    CASE            shift and go to state 9
    DEFAULT         shift and go to state 4
    FOR             shift and go to state 17
    WHILE           shift and go to state 6
    RETURN          shift and go to state 40
    ID              shift and go to state 57
    ECHO            reduce using rule 100 (empty -> .)
    BREAK           reduce using rule 100 (empty -> .)
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

    boolean                        shift and go to state 60
    iteration_stmt                 shift and go to state 61
    simple_expression              shift and go to state 44
    additive_expression            shift and go to state 46
    call                           shift and go to state 48
    statement                      shift and go to state 111
    factor                         shift and go to state 51
    var                            shift and go to state 52
    expression_stmt                shift and go to state 49
    empty                          shift and go to state 14
    print_stmt                     shift and go to state 54
    compount_stmt                  shift and go to state 55
    selection_stmt                 shift and go to state 53
    term                           shift and go to state 58
    return_stmt                    shift and go to state 42
    expression                     shift and go to state 62

state 66

    (55) selection_stmt -> SWITCH LPAREN var . RPAREN statement

    RPAREN          shift and go to state 112


state 67

    (67) var -> ID .
    (68) var -> ID . LBRACKET expression RBRACKET

    RPAREN          reduce using rule 67 (var -> ID .)
    LBRACKET        shift and go to state 101


state 68

    (53) selection_stmt -> IF LPAREN expression . RPAREN statement
    (54) selection_stmt -> IF LPAREN expression . RPAREN statement ELSE statement

    RPAREN          shift and go to state 113


state 69

    (15) class_declaration -> CLASS FUNCTION_NAME class_stmt .

    CLOSE_TAG       reduce using rule 15 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    ID              reduce using rule 15 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    AMPERSANT       reduce using rule 15 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    FUNCTION        reduce using rule 15 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    REQUIRE         reduce using rule 15 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    CLASS           reduce using rule 15 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    IF              reduce using rule 15 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    SWITCH          reduce using rule 15 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    CASE            reduce using rule 15 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    DEFAULT         reduce using rule 15 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    FOR             reduce using rule 15 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    WHILE           reduce using rule 15 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)
    ECHO            reduce using rule 15 (class_declaration -> CLASS FUNCTION_NAME class_stmt .)


state 70

    (16) class_stmt -> LBLOCK . print_stmt attributes print_stmt methods print_stmt RBLOCK
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (100) empty -> .

    ECHO            reduce using rule 100 (empty -> .)
    PRIVATE         reduce using rule 100 (empty -> .)
    PUBLIC          reduce using rule 100 (empty -> .)
    PROTECTED       reduce using rule 100 (empty -> .)

    print_stmt                     shift and go to state 114
    empty                          shift and go to state 14

state 71

    (32) var_declaration2 -> AMPERSANT ID SEMICOLON . var_declaration2
    (33) var_declaration2 -> AMPERSANT ID SEMICOLON .
    (24) var_declaration2 -> . ID SEMICOLON var_declaration2
    (25) var_declaration2 -> . ID SEMICOLON
    (26) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON var_declaration2
    (27) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON
    (28) var_declaration2 -> . ID EQUAL boolean SEMICOLON var_declaration2
    (29) var_declaration2 -> . ID EQUAL boolean SEMICOLON
    (30) var_declaration2 -> . ID EQUAL ID SEMICOLON var_declaration2
    (31) var_declaration2 -> . ID EQUAL ID SEMICOLON
    (32) var_declaration2 -> . AMPERSANT ID SEMICOLON var_declaration2
    (33) var_declaration2 -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    ECHO            reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    SEMICOLON       reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    LBLOCK          reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    IF              reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    SWITCH          reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    CASE            reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    DEFAULT         reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    FOR             reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    WHILE           reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    RETURN          reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    LPAREN          reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    NUMBER          reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    TRUE            reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    FALSE           reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    RBLOCK          reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    CLOSE_TAG       reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    FUNCTION        reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    REQUIRE         reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    CLASS           reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    PRIVATE         reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    PUBLIC          reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    PROTECTED       reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .)
    ID              shift and go to state 20
    AMPERSANT       shift and go to state 16

  ! ID              [ reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 33 (var_declaration2 -> AMPERSANT ID SEMICOLON .) ]

    var_declaration2               shift and go to state 115

state 72

    (59) iteration_stmt -> FOR LPAREN var_declaration2 . SEMICOLON expression SEMICOLON additive_expression RPAREN statement

    SEMICOLON       shift and go to state 116


state 73

    (12) print_stmt -> print_stmt ECHO ID . SEMICOLON

    SEMICOLON       shift and go to state 117


state 74

    (11) print_stmt -> print_stmt ECHO STRING . SEMICOLON

    SEMICOLON       shift and go to state 118


state 75

    (24) var_declaration2 -> ID SEMICOLON var_declaration2 .

    ID              reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    AMPERSANT       reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    ECHO            reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    SEMICOLON       reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    LBLOCK          reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    IF              reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    SWITCH          reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    CASE            reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    DEFAULT         reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    FOR             reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    WHILE           reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    RETURN          reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    LPAREN          reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    NUMBER          reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    TRUE            reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    FALSE           reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    RBLOCK          reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    CLOSE_TAG       reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    FUNCTION        reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    REQUIRE         reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    CLASS           reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    PRIVATE         reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    PUBLIC          reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)
    PROTECTED       reduce using rule 24 (var_declaration2 -> ID SEMICOLON var_declaration2 .)


state 76

    (26) var_declaration2 -> ID EQUAL NUMBER . SEMICOLON var_declaration2
    (27) var_declaration2 -> ID EQUAL NUMBER . SEMICOLON

    SEMICOLON       shift and go to state 119


state 77

    (28) var_declaration2 -> ID EQUAL boolean . SEMICOLON var_declaration2
    (29) var_declaration2 -> ID EQUAL boolean . SEMICOLON

    SEMICOLON       shift and go to state 120


state 78

    (30) var_declaration2 -> ID EQUAL ID . SEMICOLON var_declaration2
    (31) var_declaration2 -> ID EQUAL ID . SEMICOLON

    SEMICOLON       shift and go to state 121


state 79

    (35) params -> param_list .
    (37) param_list -> param_list . COMMA param

    RPAREN          reduce using rule 35 (params -> param_list .)
    COMMA           shift and go to state 122


state 80

    (38) param_list -> param .

    COMMA           reduce using rule 38 (param_list -> param .)
    RPAREN          reduce using rule 38 (param_list -> param .)


state 81

    (34) fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params . RPAREN compount_stmt

    RPAREN          shift and go to state 123


state 82

    (39) param -> ID .
    (40) param -> ID . LBRACKET RBRACKET

    COMMA           reduce using rule 39 (param -> ID .)
    RPAREN          reduce using rule 39 (param -> ID .)
    LBRACKET        shift and go to state 124


state 83

    (36) params -> empty .

    RPAREN          reduce using rule 36 (params -> empty .)


state 84

    (62) return_stmt -> RETURN SEMICOLON .

    CLOSE_TAG       reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    ID              reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    AMPERSANT       reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    FUNCTION        reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    REQUIRE         reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    CLASS           reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    IF              reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    SWITCH          reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    CASE            reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    DEFAULT         reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    FOR             reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    WHILE           reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    ECHO            reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    BREAK           reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    ELSE            reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    LBLOCK          reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    LPAREN          reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    NUMBER          reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    TRUE            reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    FALSE           reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)
    RBLOCK          reduce using rule 62 (return_stmt -> RETURN SEMICOLON .)


state 85

    (63) return_stmt -> RETURN expression . SEMICOLON

    SEMICOLON       shift and go to state 125


state 86

    (41) compount_stmt -> LBLOCK print_stmt . local_declarations print_stmt statement_list print_stmt RBLOCK
    (11) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (12) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (42) local_declarations -> . local_declarations var_declaration2
    (43) local_declarations -> . empty
    (100) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 34
    ID              reduce using rule 100 (empty -> .)
    AMPERSANT       reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    LBLOCK          reduce using rule 100 (empty -> .)
    IF              reduce using rule 100 (empty -> .)
    SWITCH          reduce using rule 100 (empty -> .)
    CASE            reduce using rule 100 (empty -> .)
    DEFAULT         reduce using rule 100 (empty -> .)
    FOR             reduce using rule 100 (empty -> .)
    WHILE           reduce using rule 100 (empty -> .)
    RETURN          reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    NUMBER          reduce using rule 100 (empty -> .)
    TRUE            reduce using rule 100 (empty -> .)
    FALSE           reduce using rule 100 (empty -> .)
    RBLOCK          reduce using rule 100 (empty -> .)

  ! ECHO            [ reduce using rule 100 (empty -> .) ]

    local_declarations             shift and go to state 126
    empty                          shift and go to state 127

state 87

    (78) additive_expression -> additive_expression addop . term
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

    term                           shift and go to state 128
    boolean                        shift and go to state 60
    call                           shift and go to state 48
    factor                         shift and go to state 51
    var                            shift and go to state 129

state 88

    (69) simple_expression -> additive_expression relop . additive_expression
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

    term                           shift and go to state 58
    boolean                        shift and go to state 60
    call                           shift and go to state 48
    factor                         shift and go to state 51
    var                            shift and go to state 129
    additive_expression            shift and go to state 130

state 89

    (71) relop -> LESS .

    LPAREN          reduce using rule 71 (relop -> LESS .)
    NUMBER          reduce using rule 71 (relop -> LESS .)
    ID              reduce using rule 71 (relop -> LESS .)
    TRUE            reduce using rule 71 (relop -> LESS .)
    FALSE           reduce using rule 71 (relop -> LESS .)


state 90

    (75) relop -> DEQUAL .

    LPAREN          reduce using rule 75 (relop -> DEQUAL .)
    NUMBER          reduce using rule 75 (relop -> DEQUAL .)
    ID              reduce using rule 75 (relop -> DEQUAL .)
    TRUE            reduce using rule 75 (relop -> DEQUAL .)
    FALSE           reduce using rule 75 (relop -> DEQUAL .)


state 91

    (76) relop -> DISTINT .

    LPAREN          reduce using rule 76 (relop -> DISTINT .)
    NUMBER          reduce using rule 76 (relop -> DISTINT .)
    ID              reduce using rule 76 (relop -> DISTINT .)
    TRUE            reduce using rule 76 (relop -> DISTINT .)
    FALSE           reduce using rule 76 (relop -> DISTINT .)


state 92

    (74) relop -> GREATEREQUAL .

    LPAREN          reduce using rule 74 (relop -> GREATEREQUAL .)
    NUMBER          reduce using rule 74 (relop -> GREATEREQUAL .)
    ID              reduce using rule 74 (relop -> GREATEREQUAL .)
    TRUE            reduce using rule 74 (relop -> GREATEREQUAL .)
    FALSE           reduce using rule 74 (relop -> GREATEREQUAL .)


state 93

    (82) addop -> PLUS .

    LPAREN          reduce using rule 82 (addop -> PLUS .)
    NUMBER          reduce using rule 82 (addop -> PLUS .)
    ID              reduce using rule 82 (addop -> PLUS .)
    TRUE            reduce using rule 82 (addop -> PLUS .)
    FALSE           reduce using rule 82 (addop -> PLUS .)


state 94

    (77) relop -> ISEQUAL .

    LPAREN          reduce using rule 77 (relop -> ISEQUAL .)
    NUMBER          reduce using rule 77 (relop -> ISEQUAL .)
    ID              reduce using rule 77 (relop -> ISEQUAL .)
    TRUE            reduce using rule 77 (relop -> ISEQUAL .)
    FALSE           reduce using rule 77 (relop -> ISEQUAL .)


state 95

    (72) relop -> LESSEQUAL .

    LPAREN          reduce using rule 72 (relop -> LESSEQUAL .)
    NUMBER          reduce using rule 72 (relop -> LESSEQUAL .)
    ID              reduce using rule 72 (relop -> LESSEQUAL .)
    TRUE            reduce using rule 72 (relop -> LESSEQUAL .)
    FALSE           reduce using rule 72 (relop -> LESSEQUAL .)


state 96

    (83) addop -> MINUS .

    LPAREN          reduce using rule 83 (addop -> MINUS .)
    NUMBER          reduce using rule 83 (addop -> MINUS .)
    ID              reduce using rule 83 (addop -> MINUS .)
    TRUE            reduce using rule 83 (addop -> MINUS .)
    FALSE           reduce using rule 83 (addop -> MINUS .)


state 97

    (73) relop -> GREATER .

    LPAREN          reduce using rule 73 (relop -> GREATER .)
    NUMBER          reduce using rule 73 (relop -> GREATER .)
    ID              reduce using rule 73 (relop -> GREATER .)
    TRUE            reduce using rule 73 (relop -> GREATER .)
    FALSE           reduce using rule 73 (relop -> GREATER .)


state 98

    (57) selection_stmt -> DEFAULT COLON statement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 131


state 99

    (64) expression -> var EQUAL . expression
    (66) expression -> var EQUAL . AMPERSANT ID
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    AMPERSANT       shift and go to state 132
    ID              shift and go to state 57
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

    term                           shift and go to state 58
    boolean                        shift and go to state 60
    call                           shift and go to state 48
    factor                         shift and go to state 51
    var                            shift and go to state 52
    simple_expression              shift and go to state 44
    expression                     shift and go to state 133
    additive_expression            shift and go to state 46

state 100

    (88) factor -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 134


state 101

    (68) var -> ID LBRACKET . expression RBRACKET
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

    term                           shift and go to state 58
    boolean                        shift and go to state 60
    call                           shift and go to state 48
    factor                         shift and go to state 51
    var                            shift and go to state 52
    simple_expression              shift and go to state 44
    expression                     shift and go to state 135
    additive_expression            shift and go to state 46

state 102

    (93) call -> ID LPAREN . args RPAREN
    (94) args -> . args_list
    (95) args -> . empty
    (96) args_list -> . args_list COMMA expression
    (97) args_list -> . expression
    (100) empty -> .
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    RPAREN          reduce using rule 100 (empty -> .)
    ID              shift and go to state 57
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

    term                           shift and go to state 58
    args                           shift and go to state 137
    args_list                      shift and go to state 138
    boolean                        shift and go to state 60
    call                           shift and go to state 48
    additive_expression            shift and go to state 46
    factor                         shift and go to state 51
    var                            shift and go to state 52
    simple_expression              shift and go to state 44
    expression                     shift and go to state 139
    empty                          shift and go to state 136

state 103

    (87) mulop -> DIVIDE .

    LPAREN          reduce using rule 87 (mulop -> DIVIDE .)
    NUMBER          reduce using rule 87 (mulop -> DIVIDE .)
    ID              reduce using rule 87 (mulop -> DIVIDE .)
    TRUE            reduce using rule 87 (mulop -> DIVIDE .)
    FALSE           reduce using rule 87 (mulop -> DIVIDE .)


state 104

    (81) additive_expression -> term PLUSPLUS .

    LESS            reduce using rule 81 (additive_expression -> term PLUSPLUS .)
    LESSEQUAL       reduce using rule 81 (additive_expression -> term PLUSPLUS .)
    GREATER         reduce using rule 81 (additive_expression -> term PLUSPLUS .)
    GREATEREQUAL    reduce using rule 81 (additive_expression -> term PLUSPLUS .)
    DEQUAL          reduce using rule 81 (additive_expression -> term PLUSPLUS .)
    DISTINT         reduce using rule 81 (additive_expression -> term PLUSPLUS .)
    ISEQUAL         reduce using rule 81 (additive_expression -> term PLUSPLUS .)
    PLUS            reduce using rule 81 (additive_expression -> term PLUSPLUS .)
    MINUS           reduce using rule 81 (additive_expression -> term PLUSPLUS .)
    SEMICOLON       reduce using rule 81 (additive_expression -> term PLUSPLUS .)
    RPAREN          reduce using rule 81 (additive_expression -> term PLUSPLUS .)
    RBRACKET        reduce using rule 81 (additive_expression -> term PLUSPLUS .)
    COMMA           reduce using rule 81 (additive_expression -> term PLUSPLUS .)


state 105

    (86) mulop -> TIMES .

    LPAREN          reduce using rule 86 (mulop -> TIMES .)
    NUMBER          reduce using rule 86 (mulop -> TIMES .)
    ID              reduce using rule 86 (mulop -> TIMES .)
    TRUE            reduce using rule 86 (mulop -> TIMES .)
    FALSE           reduce using rule 86 (mulop -> TIMES .)


state 106

    (84) term -> term mulop . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

    boolean                        shift and go to state 60
    call                           shift and go to state 48
    factor                         shift and go to state 140
    var                            shift and go to state 129

state 107

    (80) additive_expression -> term MINUSMINUS .

    LESS            reduce using rule 80 (additive_expression -> term MINUSMINUS .)
    LESSEQUAL       reduce using rule 80 (additive_expression -> term MINUSMINUS .)
    GREATER         reduce using rule 80 (additive_expression -> term MINUSMINUS .)
    GREATEREQUAL    reduce using rule 80 (additive_expression -> term MINUSMINUS .)
    DEQUAL          reduce using rule 80 (additive_expression -> term MINUSMINUS .)
    DISTINT         reduce using rule 80 (additive_expression -> term MINUSMINUS .)
    ISEQUAL         reduce using rule 80 (additive_expression -> term MINUSMINUS .)
    PLUS            reduce using rule 80 (additive_expression -> term MINUSMINUS .)
    MINUS           reduce using rule 80 (additive_expression -> term MINUSMINUS .)
    SEMICOLON       reduce using rule 80 (additive_expression -> term MINUSMINUS .)
    RPAREN          reduce using rule 80 (additive_expression -> term MINUSMINUS .)
    RBRACKET        reduce using rule 80 (additive_expression -> term MINUSMINUS .)
    COMMA           reduce using rule 80 (additive_expression -> term MINUSMINUS .)


state 108

    (51) expression_stmt -> expression SEMICOLON .

    CLOSE_TAG       reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    ID              reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    AMPERSANT       reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    FUNCTION        reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    REQUIRE         reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    CLASS           reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    IF              reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    SWITCH          reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    CASE            reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    DEFAULT         reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    FOR             reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    WHILE           reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    ECHO            reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    BREAK           reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    ELSE            reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    LBLOCK          reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    RETURN          reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    LPAREN          reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    NUMBER          reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    TRUE            reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    FALSE           reduce using rule 51 (expression_stmt -> expression SEMICOLON .)
    RBLOCK          reduce using rule 51 (expression_stmt -> expression SEMICOLON .)


state 109

    (14) header_declaration -> REQUIRE LPAREN STRING RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 141


state 110

    (60) iteration_stmt -> WHILE LPAREN expression RPAREN . statement
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . return_stmt
    (51) expression_stmt -> . expression SEMICOLON
    (52) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (55) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . print_stmt
    (59) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (60) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (61) iteration_stmt -> . print_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (100) empty -> .
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 47
    LBLOCK          shift and go to state 43
    IF              shift and go to state 12
    SWITCH          shift and go to state 10
    CASE            shift and go to state 9
    DEFAULT         shift and go to state 4
    FOR             shift and go to state 17
    WHILE           shift and go to state 6
    RETURN          shift and go to state 40
    ID              shift and go to state 57
    ECHO            reduce using rule 100 (empty -> .)
    CLOSE_TAG       reduce using rule 100 (empty -> .)
    AMPERSANT       reduce using rule 100 (empty -> .)
    FUNCTION        reduce using rule 100 (empty -> .)
    REQUIRE         reduce using rule 100 (empty -> .)
    CLASS           reduce using rule 100 (empty -> .)
    BREAK           reduce using rule 100 (empty -> .)
    ELSE            reduce using rule 100 (empty -> .)
    RBLOCK          reduce using rule 100 (empty -> .)
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

  ! ID              [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! SWITCH          [ reduce using rule 100 (empty -> .) ]
  ! CASE            [ reduce using rule 100 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 100 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 100 (empty -> .) ]
  ! RETURN          [ reduce using rule 100 (empty -> .) ]
  ! LPAREN          [ reduce using rule 100 (empty -> .) ]
  ! NUMBER          [ reduce using rule 100 (empty -> .) ]
  ! TRUE            [ reduce using rule 100 (empty -> .) ]
  ! FALSE           [ reduce using rule 100 (empty -> .) ]

    boolean                        shift and go to state 60
    return_stmt                    shift and go to state 42
    simple_expression              shift and go to state 44
    additive_expression            shift and go to state 46
    call                           shift and go to state 48
    statement                      shift and go to state 142
    factor                         shift and go to state 51
    var                            shift and go to state 52
    expression_stmt                shift and go to state 49
    empty                          shift and go to state 14
    print_stmt                     shift and go to state 54
    compount_stmt                  shift and go to state 55
    selection_stmt                 shift and go to state 53
    term                           shift and go to state 58
    iteration_stmt                 shift and go to state 61
    expression                     shift and go to state 62

state 111

    (56) selection_stmt -> CASE NUMBER COLON statement . BREAK SEMICOLON

    BREAK           shift and go to state 143


state 112

    (55) selection_stmt -> SWITCH LPAREN var RPAREN . statement
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . return_stmt
    (51) expression_stmt -> . expression SEMICOLON
    (52) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (55) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . print_stmt
    (59) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (60) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (61) iteration_stmt -> . print_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (100) empty -> .
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 47
    LBLOCK          shift and go to state 43
    IF              shift and go to state 12
    SWITCH          shift and go to state 10
    CASE            shift and go to state 9
    DEFAULT         shift and go to state 4
    FOR             shift and go to state 17
    WHILE           shift and go to state 6
    RETURN          shift and go to state 40
    ID              shift and go to state 57
    ECHO            reduce using rule 100 (empty -> .)
    CLOSE_TAG       reduce using rule 100 (empty -> .)
    AMPERSANT       reduce using rule 100 (empty -> .)
    FUNCTION        reduce using rule 100 (empty -> .)
    REQUIRE         reduce using rule 100 (empty -> .)
    CLASS           reduce using rule 100 (empty -> .)
    BREAK           reduce using rule 100 (empty -> .)
    ELSE            reduce using rule 100 (empty -> .)
    RBLOCK          reduce using rule 100 (empty -> .)
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

  ! ID              [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! SWITCH          [ reduce using rule 100 (empty -> .) ]
  ! CASE            [ reduce using rule 100 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 100 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 100 (empty -> .) ]
  ! RETURN          [ reduce using rule 100 (empty -> .) ]
  ! LPAREN          [ reduce using rule 100 (empty -> .) ]
  ! NUMBER          [ reduce using rule 100 (empty -> .) ]
  ! TRUE            [ reduce using rule 100 (empty -> .) ]
  ! FALSE           [ reduce using rule 100 (empty -> .) ]

    boolean                        shift and go to state 60
    return_stmt                    shift and go to state 42
    simple_expression              shift and go to state 44
    additive_expression            shift and go to state 46
    call                           shift and go to state 48
    statement                      shift and go to state 144
    factor                         shift and go to state 51
    var                            shift and go to state 52
    expression_stmt                shift and go to state 49
    empty                          shift and go to state 14
    print_stmt                     shift and go to state 54
    compount_stmt                  shift and go to state 55
    selection_stmt                 shift and go to state 53
    term                           shift and go to state 58
    iteration_stmt                 shift and go to state 61
    expression                     shift and go to state 62

state 113

    (53) selection_stmt -> IF LPAREN expression RPAREN . statement
    (54) selection_stmt -> IF LPAREN expression RPAREN . statement ELSE statement
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . return_stmt
    (51) expression_stmt -> . expression SEMICOLON
    (52) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (55) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . print_stmt
    (59) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (60) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (61) iteration_stmt -> . print_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (100) empty -> .
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 47
    LBLOCK          shift and go to state 43
    IF              shift and go to state 12
    SWITCH          shift and go to state 10
    CASE            shift and go to state 9
    DEFAULT         shift and go to state 4
    FOR             shift and go to state 17
    WHILE           shift and go to state 6
    RETURN          shift and go to state 40
    ID              shift and go to state 57
    ECHO            reduce using rule 100 (empty -> .)
    CLOSE_TAG       reduce using rule 100 (empty -> .)
    AMPERSANT       reduce using rule 100 (empty -> .)
    FUNCTION        reduce using rule 100 (empty -> .)
    REQUIRE         reduce using rule 100 (empty -> .)
    CLASS           reduce using rule 100 (empty -> .)
    BREAK           reduce using rule 100 (empty -> .)
    ELSE            reduce using rule 100 (empty -> .)
    RBLOCK          reduce using rule 100 (empty -> .)
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

  ! ID              [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! SWITCH          [ reduce using rule 100 (empty -> .) ]
  ! CASE            [ reduce using rule 100 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 100 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 100 (empty -> .) ]
  ! RETURN          [ reduce using rule 100 (empty -> .) ]
  ! LPAREN          [ reduce using rule 100 (empty -> .) ]
  ! NUMBER          [ reduce using rule 100 (empty -> .) ]
  ! TRUE            [ reduce using rule 100 (empty -> .) ]
  ! FALSE           [ reduce using rule 100 (empty -> .) ]

    boolean                        shift and go to state 60
    return_stmt                    shift and go to state 42
    simple_expression              shift and go to state 44
    additive_expression            shift and go to state 46
    call                           shift and go to state 48
    statement                      shift and go to state 145
    factor                         shift and go to state 51
    var                            shift and go to state 52
    expression_stmt                shift and go to state 49
    empty                          shift and go to state 14
    print_stmt                     shift and go to state 54
    compount_stmt                  shift and go to state 55
    selection_stmt                 shift and go to state 53
    term                           shift and go to state 58
    iteration_stmt                 shift and go to state 61
    expression                     shift and go to state 62

state 114

    (16) class_stmt -> LBLOCK print_stmt . attributes print_stmt methods print_stmt RBLOCK
    (11) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (12) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (17) attributes -> . attributes scope var_declaration2
    (18) attributes -> . scope var_declaration2
    (21) scope -> . PRIVATE
    (22) scope -> . PUBLIC
    (23) scope -> . PROTECTED

    ECHO            shift and go to state 34
    PRIVATE         shift and go to state 147
    PUBLIC          shift and go to state 146
    PROTECTED       shift and go to state 148

    attributes                     shift and go to state 150
    scope                          shift and go to state 149

state 115

    (32) var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .

    ID              reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    AMPERSANT       reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    ECHO            reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    SEMICOLON       reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    LBLOCK          reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    IF              reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    SWITCH          reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    CASE            reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    DEFAULT         reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    FOR             reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    WHILE           reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    RETURN          reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    LPAREN          reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    NUMBER          reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    TRUE            reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    FALSE           reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    RBLOCK          reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    CLOSE_TAG       reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    FUNCTION        reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    REQUIRE         reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    CLASS           reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    PRIVATE         reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    PUBLIC          reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)
    PROTECTED       reduce using rule 32 (var_declaration2 -> AMPERSANT ID SEMICOLON var_declaration2 .)


state 116

    (59) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON . expression SEMICOLON additive_expression RPAREN statement
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

    term                           shift and go to state 58
    var                            shift and go to state 52
    boolean                        shift and go to state 60
    call                           shift and go to state 48
    factor                         shift and go to state 51
    simple_expression              shift and go to state 44
    expression                     shift and go to state 151
    additive_expression            shift and go to state 46

state 117

    (12) print_stmt -> print_stmt ECHO ID SEMICOLON .

    RBLOCK          reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    ECHO            reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    CLOSE_TAG       reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    ID              reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    AMPERSANT       reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    FUNCTION        reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    REQUIRE         reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    CLASS           reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    IF              reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    SWITCH          reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    CASE            reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    DEFAULT         reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    FOR             reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    WHILE           reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    SEMICOLON       reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    LBLOCK          reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    RETURN          reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    LPAREN          reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    NUMBER          reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    TRUE            reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    FALSE           reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    BREAK           reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    ELSE            reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    PRIVATE         reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    PUBLIC          reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)
    PROTECTED       reduce using rule 12 (print_stmt -> print_stmt ECHO ID SEMICOLON .)


state 118

    (11) print_stmt -> print_stmt ECHO STRING SEMICOLON .

    RBLOCK          reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    ECHO            reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    CLOSE_TAG       reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    ID              reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    AMPERSANT       reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    FUNCTION        reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    REQUIRE         reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    CLASS           reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    IF              reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    SWITCH          reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    CASE            reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    DEFAULT         reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    FOR             reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    WHILE           reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    SEMICOLON       reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    LBLOCK          reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    RETURN          reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    LPAREN          reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    NUMBER          reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    TRUE            reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    FALSE           reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    BREAK           reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    ELSE            reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    PRIVATE         reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    PUBLIC          reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)
    PROTECTED       reduce using rule 11 (print_stmt -> print_stmt ECHO STRING SEMICOLON .)


state 119

    (26) var_declaration2 -> ID EQUAL NUMBER SEMICOLON . var_declaration2
    (27) var_declaration2 -> ID EQUAL NUMBER SEMICOLON .
    (24) var_declaration2 -> . ID SEMICOLON var_declaration2
    (25) var_declaration2 -> . ID SEMICOLON
    (26) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON var_declaration2
    (27) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON
    (28) var_declaration2 -> . ID EQUAL boolean SEMICOLON var_declaration2
    (29) var_declaration2 -> . ID EQUAL boolean SEMICOLON
    (30) var_declaration2 -> . ID EQUAL ID SEMICOLON var_declaration2
    (31) var_declaration2 -> . ID EQUAL ID SEMICOLON
    (32) var_declaration2 -> . AMPERSANT ID SEMICOLON var_declaration2
    (33) var_declaration2 -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    ECHO            reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    SEMICOLON       reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    LBLOCK          reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    IF              reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    SWITCH          reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    CASE            reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    DEFAULT         reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    FOR             reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    WHILE           reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    RETURN          reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    LPAREN          reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    NUMBER          reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    TRUE            reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    FALSE           reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    RBLOCK          reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    CLOSE_TAG       reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    FUNCTION        reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    REQUIRE         reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    CLASS           reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    PRIVATE         reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    PUBLIC          reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    PROTECTED       reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .)
    ID              shift and go to state 20
    AMPERSANT       shift and go to state 16

  ! ID              [ reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 27 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON .) ]

    var_declaration2               shift and go to state 152

state 120

    (28) var_declaration2 -> ID EQUAL boolean SEMICOLON . var_declaration2
    (29) var_declaration2 -> ID EQUAL boolean SEMICOLON .
    (24) var_declaration2 -> . ID SEMICOLON var_declaration2
    (25) var_declaration2 -> . ID SEMICOLON
    (26) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON var_declaration2
    (27) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON
    (28) var_declaration2 -> . ID EQUAL boolean SEMICOLON var_declaration2
    (29) var_declaration2 -> . ID EQUAL boolean SEMICOLON
    (30) var_declaration2 -> . ID EQUAL ID SEMICOLON var_declaration2
    (31) var_declaration2 -> . ID EQUAL ID SEMICOLON
    (32) var_declaration2 -> . AMPERSANT ID SEMICOLON var_declaration2
    (33) var_declaration2 -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    ECHO            reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    SEMICOLON       reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    LBLOCK          reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    IF              reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    SWITCH          reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    CASE            reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    DEFAULT         reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    FOR             reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    WHILE           reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    RETURN          reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    LPAREN          reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    NUMBER          reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    TRUE            reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    FALSE           reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    RBLOCK          reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    CLOSE_TAG       reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    FUNCTION        reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    REQUIRE         reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    CLASS           reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    PRIVATE         reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    PUBLIC          reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    PROTECTED       reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .)
    ID              shift and go to state 20
    AMPERSANT       shift and go to state 16

  ! ID              [ reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 29 (var_declaration2 -> ID EQUAL boolean SEMICOLON .) ]

    var_declaration2               shift and go to state 153

state 121

    (30) var_declaration2 -> ID EQUAL ID SEMICOLON . var_declaration2
    (31) var_declaration2 -> ID EQUAL ID SEMICOLON .
    (24) var_declaration2 -> . ID SEMICOLON var_declaration2
    (25) var_declaration2 -> . ID SEMICOLON
    (26) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON var_declaration2
    (27) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON
    (28) var_declaration2 -> . ID EQUAL boolean SEMICOLON var_declaration2
    (29) var_declaration2 -> . ID EQUAL boolean SEMICOLON
    (30) var_declaration2 -> . ID EQUAL ID SEMICOLON var_declaration2
    (31) var_declaration2 -> . ID EQUAL ID SEMICOLON
    (32) var_declaration2 -> . AMPERSANT ID SEMICOLON var_declaration2
    (33) var_declaration2 -> . AMPERSANT ID SEMICOLON

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for AMPERSANT resolved as shift
    ECHO            reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    SEMICOLON       reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    LBLOCK          reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    IF              reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    SWITCH          reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    CASE            reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    DEFAULT         reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    FOR             reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    WHILE           reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    RETURN          reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    LPAREN          reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    NUMBER          reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    TRUE            reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    FALSE           reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    RBLOCK          reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    CLOSE_TAG       reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    FUNCTION        reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    REQUIRE         reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    CLASS           reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    PRIVATE         reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    PUBLIC          reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    PROTECTED       reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .)
    ID              shift and go to state 20
    AMPERSANT       shift and go to state 16

  ! ID              [ reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .) ]
  ! AMPERSANT       [ reduce using rule 31 (var_declaration2 -> ID EQUAL ID SEMICOLON .) ]

    var_declaration2               shift and go to state 154

state 122

    (37) param_list -> param_list COMMA . param
    (39) param -> . ID
    (40) param -> . ID LBRACKET RBRACKET

    ID              shift and go to state 82

    param                          shift and go to state 155

state 123

    (34) fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN . compount_stmt
    (41) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK

    LBLOCK          shift and go to state 43

    compount_stmt                  shift and go to state 156

state 124

    (40) param -> ID LBRACKET . RBRACKET

    RBRACKET        shift and go to state 157


state 125

    (63) return_stmt -> RETURN expression SEMICOLON .

    CLOSE_TAG       reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    ID              reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    AMPERSANT       reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    FUNCTION        reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    REQUIRE         reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    CLASS           reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    IF              reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    SWITCH          reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    CASE            reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    DEFAULT         reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    FOR             reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    WHILE           reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    ECHO            reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    BREAK           reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    ELSE            reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    SEMICOLON       reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    LBLOCK          reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    RETURN          reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    LPAREN          reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    NUMBER          reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    TRUE            reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    FALSE           reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)
    RBLOCK          reduce using rule 63 (return_stmt -> RETURN expression SEMICOLON .)


state 126

    (41) compount_stmt -> LBLOCK print_stmt local_declarations . print_stmt statement_list print_stmt RBLOCK
    (42) local_declarations -> local_declarations . var_declaration2
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (24) var_declaration2 -> . ID SEMICOLON var_declaration2
    (25) var_declaration2 -> . ID SEMICOLON
    (26) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON var_declaration2
    (27) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON
    (28) var_declaration2 -> . ID EQUAL boolean SEMICOLON var_declaration2
    (29) var_declaration2 -> . ID EQUAL boolean SEMICOLON
    (30) var_declaration2 -> . ID EQUAL ID SEMICOLON var_declaration2
    (31) var_declaration2 -> . ID EQUAL ID SEMICOLON
    (32) var_declaration2 -> . AMPERSANT ID SEMICOLON var_declaration2
    (33) var_declaration2 -> . AMPERSANT ID SEMICOLON
    (100) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 20
    AMPERSANT       shift and go to state 16
    ECHO            reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    LBLOCK          reduce using rule 100 (empty -> .)
    IF              reduce using rule 100 (empty -> .)
    SWITCH          reduce using rule 100 (empty -> .)
    CASE            reduce using rule 100 (empty -> .)
    DEFAULT         reduce using rule 100 (empty -> .)
    FOR             reduce using rule 100 (empty -> .)
    WHILE           reduce using rule 100 (empty -> .)
    RETURN          reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    NUMBER          reduce using rule 100 (empty -> .)
    TRUE            reduce using rule 100 (empty -> .)
    FALSE           reduce using rule 100 (empty -> .)
    RBLOCK          reduce using rule 100 (empty -> .)

  ! ID              [ reduce using rule 100 (empty -> .) ]

    print_stmt                     shift and go to state 158
    var_declaration2               shift and go to state 159
    empty                          shift and go to state 14

state 127

    (43) local_declarations -> empty .

    ID              reduce using rule 43 (local_declarations -> empty .)
    AMPERSANT       reduce using rule 43 (local_declarations -> empty .)
    ECHO            reduce using rule 43 (local_declarations -> empty .)
    SEMICOLON       reduce using rule 43 (local_declarations -> empty .)
    LBLOCK          reduce using rule 43 (local_declarations -> empty .)
    IF              reduce using rule 43 (local_declarations -> empty .)
    SWITCH          reduce using rule 43 (local_declarations -> empty .)
    CASE            reduce using rule 43 (local_declarations -> empty .)
    DEFAULT         reduce using rule 43 (local_declarations -> empty .)
    FOR             reduce using rule 43 (local_declarations -> empty .)
    WHILE           reduce using rule 43 (local_declarations -> empty .)
    RETURN          reduce using rule 43 (local_declarations -> empty .)
    LPAREN          reduce using rule 43 (local_declarations -> empty .)
    NUMBER          reduce using rule 43 (local_declarations -> empty .)
    TRUE            reduce using rule 43 (local_declarations -> empty .)
    FALSE           reduce using rule 43 (local_declarations -> empty .)
    RBLOCK          reduce using rule 43 (local_declarations -> empty .)


state 128

    (78) additive_expression -> additive_expression addop term .
    (84) term -> term . mulop factor
    (86) mulop -> . TIMES
    (87) mulop -> . DIVIDE

    LESS            reduce using rule 78 (additive_expression -> additive_expression addop term .)
    LESSEQUAL       reduce using rule 78 (additive_expression -> additive_expression addop term .)
    GREATER         reduce using rule 78 (additive_expression -> additive_expression addop term .)
    GREATEREQUAL    reduce using rule 78 (additive_expression -> additive_expression addop term .)
    DEQUAL          reduce using rule 78 (additive_expression -> additive_expression addop term .)
    DISTINT         reduce using rule 78 (additive_expression -> additive_expression addop term .)
    ISEQUAL         reduce using rule 78 (additive_expression -> additive_expression addop term .)
    PLUS            reduce using rule 78 (additive_expression -> additive_expression addop term .)
    MINUS           reduce using rule 78 (additive_expression -> additive_expression addop term .)
    SEMICOLON       reduce using rule 78 (additive_expression -> additive_expression addop term .)
    RPAREN          reduce using rule 78 (additive_expression -> additive_expression addop term .)
    RBRACKET        reduce using rule 78 (additive_expression -> additive_expression addop term .)
    COMMA           reduce using rule 78 (additive_expression -> additive_expression addop term .)
    TIMES           shift and go to state 105
    DIVIDE          shift and go to state 103

    mulop                          shift and go to state 106

state 129

    (89) factor -> var .

    MINUSMINUS      reduce using rule 89 (factor -> var .)
    PLUSPLUS        reduce using rule 89 (factor -> var .)
    TIMES           reduce using rule 89 (factor -> var .)
    DIVIDE          reduce using rule 89 (factor -> var .)
    LESS            reduce using rule 89 (factor -> var .)
    LESSEQUAL       reduce using rule 89 (factor -> var .)
    GREATER         reduce using rule 89 (factor -> var .)
    GREATEREQUAL    reduce using rule 89 (factor -> var .)
    DEQUAL          reduce using rule 89 (factor -> var .)
    DISTINT         reduce using rule 89 (factor -> var .)
    ISEQUAL         reduce using rule 89 (factor -> var .)
    PLUS            reduce using rule 89 (factor -> var .)
    MINUS           reduce using rule 89 (factor -> var .)
    SEMICOLON       reduce using rule 89 (factor -> var .)
    RPAREN          reduce using rule 89 (factor -> var .)
    RBRACKET        reduce using rule 89 (factor -> var .)
    COMMA           reduce using rule 89 (factor -> var .)


state 130

    (69) simple_expression -> additive_expression relop additive_expression .
    (78) additive_expression -> additive_expression . addop term
    (82) addop -> . PLUS
    (83) addop -> . MINUS

    RPAREN          reduce using rule 69 (simple_expression -> additive_expression relop additive_expression .)
    SEMICOLON       reduce using rule 69 (simple_expression -> additive_expression relop additive_expression .)
    RBRACKET        reduce using rule 69 (simple_expression -> additive_expression relop additive_expression .)
    COMMA           reduce using rule 69 (simple_expression -> additive_expression relop additive_expression .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 96

    addop                          shift and go to state 87

state 131

    (57) selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .

    CLOSE_TAG       reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ID              reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    AMPERSANT       reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FUNCTION        reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    REQUIRE         reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    CLASS           reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    IF              reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    SWITCH          reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    CASE            reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    DEFAULT         reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FOR             reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    WHILE           reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ECHO            reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    BREAK           reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    ELSE            reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    LBLOCK          reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    RETURN          reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    LPAREN          reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    NUMBER          reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    TRUE            reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    FALSE           reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)
    RBLOCK          reduce using rule 57 (selection_stmt -> DEFAULT COLON statement BREAK SEMICOLON .)


state 132

    (66) expression -> var EQUAL AMPERSANT . ID

    ID              shift and go to state 160


state 133

    (64) expression -> var EQUAL expression .

    SEMICOLON       reduce using rule 64 (expression -> var EQUAL expression .)
    COMMA           reduce using rule 64 (expression -> var EQUAL expression .)
    RPAREN          reduce using rule 64 (expression -> var EQUAL expression .)
    RBRACKET        reduce using rule 64 (expression -> var EQUAL expression .)


state 134

    (88) factor -> LPAREN expression RPAREN .

    MINUSMINUS      reduce using rule 88 (factor -> LPAREN expression RPAREN .)
    PLUSPLUS        reduce using rule 88 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 88 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 88 (factor -> LPAREN expression RPAREN .)
    LESS            reduce using rule 88 (factor -> LPAREN expression RPAREN .)
    LESSEQUAL       reduce using rule 88 (factor -> LPAREN expression RPAREN .)
    GREATER         reduce using rule 88 (factor -> LPAREN expression RPAREN .)
    GREATEREQUAL    reduce using rule 88 (factor -> LPAREN expression RPAREN .)
    DEQUAL          reduce using rule 88 (factor -> LPAREN expression RPAREN .)
    DISTINT         reduce using rule 88 (factor -> LPAREN expression RPAREN .)
    ISEQUAL         reduce using rule 88 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 88 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 88 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 88 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 88 (factor -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 88 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 88 (factor -> LPAREN expression RPAREN .)


state 135

    (68) var -> ID LBRACKET expression . RBRACKET

    RBRACKET        shift and go to state 161


state 136

    (95) args -> empty .

    RPAREN          reduce using rule 95 (args -> empty .)


state 137

    (93) call -> ID LPAREN args . RPAREN

    RPAREN          shift and go to state 162


state 138

    (94) args -> args_list .
    (96) args_list -> args_list . COMMA expression

    RPAREN          reduce using rule 94 (args -> args_list .)
    COMMA           shift and go to state 163


state 139

    (97) args_list -> expression .

    COMMA           reduce using rule 97 (args_list -> expression .)
    RPAREN          reduce using rule 97 (args_list -> expression .)


state 140

    (84) term -> term mulop factor .

    MINUSMINUS      reduce using rule 84 (term -> term mulop factor .)
    PLUSPLUS        reduce using rule 84 (term -> term mulop factor .)
    TIMES           reduce using rule 84 (term -> term mulop factor .)
    DIVIDE          reduce using rule 84 (term -> term mulop factor .)
    PLUS            reduce using rule 84 (term -> term mulop factor .)
    MINUS           reduce using rule 84 (term -> term mulop factor .)
    SEMICOLON       reduce using rule 84 (term -> term mulop factor .)
    RPAREN          reduce using rule 84 (term -> term mulop factor .)
    RBRACKET        reduce using rule 84 (term -> term mulop factor .)
    COMMA           reduce using rule 84 (term -> term mulop factor .)
    LESS            reduce using rule 84 (term -> term mulop factor .)
    LESSEQUAL       reduce using rule 84 (term -> term mulop factor .)
    GREATER         reduce using rule 84 (term -> term mulop factor .)
    GREATEREQUAL    reduce using rule 84 (term -> term mulop factor .)
    DEQUAL          reduce using rule 84 (term -> term mulop factor .)
    DISTINT         reduce using rule 84 (term -> term mulop factor .)
    ISEQUAL         reduce using rule 84 (term -> term mulop factor .)


state 141

    (14) header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .

    CLOSE_TAG       reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    ID              reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    AMPERSANT       reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    FUNCTION        reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    REQUIRE         reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    CLASS           reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    IF              reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    SWITCH          reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    CASE            reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    DEFAULT         reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    FOR             reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    WHILE           reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)
    ECHO            reduce using rule 14 (header_declaration -> REQUIRE LPAREN STRING RPAREN SEMICOLON .)


state 142

    (60) iteration_stmt -> WHILE LPAREN expression RPAREN statement .

    CLOSE_TAG       reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    CASE            reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 60 (iteration_stmt -> WHILE LPAREN expression RPAREN statement .)


state 143

    (56) selection_stmt -> CASE NUMBER COLON statement BREAK . SEMICOLON

    SEMICOLON       shift and go to state 164


state 144

    (55) selection_stmt -> SWITCH LPAREN var RPAREN statement .

    CLOSE_TAG       reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ID              reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    AMPERSANT       reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FUNCTION        reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    REQUIRE         reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CLASS           reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    IF              reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SWITCH          reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    CASE            reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    DEFAULT         reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FOR             reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    WHILE           reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ECHO            reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    BREAK           reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    ELSE            reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    SEMICOLON       reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LBLOCK          reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RETURN          reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    LPAREN          reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    NUMBER          reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    TRUE            reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    FALSE           reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)
    RBLOCK          reduce using rule 55 (selection_stmt -> SWITCH LPAREN var RPAREN statement .)


state 145

    (53) selection_stmt -> IF LPAREN expression RPAREN statement .
    (54) selection_stmt -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    CLOSE_TAG       reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    AMPERSANT       reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FUNCTION        reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    REQUIRE         reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CLASS           reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SWITCH          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    CASE            reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    DEFAULT         reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ECHO            reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LBLOCK          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    TRUE            reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    FALSE           reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    RBLOCK          reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 165

  ! ELSE            [ reduce using rule 53 (selection_stmt -> IF LPAREN expression RPAREN statement .) ]


state 146

    (22) scope -> PUBLIC .

    FUNCTION        reduce using rule 22 (scope -> PUBLIC .)
    ID              reduce using rule 22 (scope -> PUBLIC .)
    AMPERSANT       reduce using rule 22 (scope -> PUBLIC .)


state 147

    (21) scope -> PRIVATE .

    FUNCTION        reduce using rule 21 (scope -> PRIVATE .)
    ID              reduce using rule 21 (scope -> PRIVATE .)
    AMPERSANT       reduce using rule 21 (scope -> PRIVATE .)


state 148

    (23) scope -> PROTECTED .

    FUNCTION        reduce using rule 23 (scope -> PROTECTED .)
    ID              reduce using rule 23 (scope -> PROTECTED .)
    AMPERSANT       reduce using rule 23 (scope -> PROTECTED .)


state 149

    (18) attributes -> scope . var_declaration2
    (24) var_declaration2 -> . ID SEMICOLON var_declaration2
    (25) var_declaration2 -> . ID SEMICOLON
    (26) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON var_declaration2
    (27) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON
    (28) var_declaration2 -> . ID EQUAL boolean SEMICOLON var_declaration2
    (29) var_declaration2 -> . ID EQUAL boolean SEMICOLON
    (30) var_declaration2 -> . ID EQUAL ID SEMICOLON var_declaration2
    (31) var_declaration2 -> . ID EQUAL ID SEMICOLON
    (32) var_declaration2 -> . AMPERSANT ID SEMICOLON var_declaration2
    (33) var_declaration2 -> . AMPERSANT ID SEMICOLON

    ID              shift and go to state 20
    AMPERSANT       shift and go to state 16

    var_declaration2               shift and go to state 166

state 150

    (16) class_stmt -> LBLOCK print_stmt attributes . print_stmt methods print_stmt RBLOCK
    (17) attributes -> attributes . scope var_declaration2
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (21) scope -> . PRIVATE
    (22) scope -> . PUBLIC
    (23) scope -> . PROTECTED
    (100) empty -> .

  ! shift/reduce conflict for PRIVATE resolved as shift
  ! shift/reduce conflict for PUBLIC resolved as shift
  ! shift/reduce conflict for PROTECTED resolved as shift
    PRIVATE         shift and go to state 147
    PUBLIC          shift and go to state 146
    PROTECTED       shift and go to state 148
    ECHO            reduce using rule 100 (empty -> .)

  ! PRIVATE         [ reduce using rule 100 (empty -> .) ]
  ! PUBLIC          [ reduce using rule 100 (empty -> .) ]
  ! PROTECTED       [ reduce using rule 100 (empty -> .) ]

    print_stmt                     shift and go to state 167
    scope                          shift and go to state 168
    empty                          shift and go to state 14

state 151

    (59) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression . SEMICOLON additive_expression RPAREN statement

    SEMICOLON       shift and go to state 169


state 152

    (26) var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .

    ID              reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    AMPERSANT       reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    ECHO            reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    SEMICOLON       reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    LBLOCK          reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    IF              reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    SWITCH          reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    CASE            reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    DEFAULT         reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    FOR             reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    WHILE           reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    RETURN          reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    LPAREN          reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    NUMBER          reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    TRUE            reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    FALSE           reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    RBLOCK          reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    CLOSE_TAG       reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    FUNCTION        reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    REQUIRE         reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    CLASS           reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    PRIVATE         reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    PUBLIC          reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)
    PROTECTED       reduce using rule 26 (var_declaration2 -> ID EQUAL NUMBER SEMICOLON var_declaration2 .)


state 153

    (28) var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .

    ID              reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    AMPERSANT       reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    ECHO            reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    SEMICOLON       reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    LBLOCK          reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    IF              reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    SWITCH          reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    CASE            reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    DEFAULT         reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    FOR             reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    WHILE           reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    RETURN          reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    LPAREN          reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    NUMBER          reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    TRUE            reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    FALSE           reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    RBLOCK          reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    CLOSE_TAG       reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    FUNCTION        reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    REQUIRE         reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    CLASS           reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    PRIVATE         reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    PUBLIC          reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)
    PROTECTED       reduce using rule 28 (var_declaration2 -> ID EQUAL boolean SEMICOLON var_declaration2 .)


state 154

    (30) var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .

    ID              reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    AMPERSANT       reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    ECHO            reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    SEMICOLON       reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    LBLOCK          reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    IF              reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    SWITCH          reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    CASE            reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    DEFAULT         reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    FOR             reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    WHILE           reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    RETURN          reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    LPAREN          reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    NUMBER          reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    TRUE            reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    FALSE           reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    RBLOCK          reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    CLOSE_TAG       reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    FUNCTION        reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    REQUIRE         reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    CLASS           reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    PRIVATE         reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    PUBLIC          reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)
    PROTECTED       reduce using rule 30 (var_declaration2 -> ID EQUAL ID SEMICOLON var_declaration2 .)


state 155

    (37) param_list -> param_list COMMA param .

    COMMA           reduce using rule 37 (param_list -> param_list COMMA param .)
    RPAREN          reduce using rule 37 (param_list -> param_list COMMA param .)


state 156

    (34) fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .

    PRIVATE         reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    PUBLIC          reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    PROTECTED       reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    RBLOCK          reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    ECHO            reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    CLOSE_TAG       reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    ID              reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    AMPERSANT       reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    FUNCTION        reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    REQUIRE         reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    CLASS           reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    IF              reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    SWITCH          reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    CASE            reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    DEFAULT         reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    FOR             reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)
    WHILE           reduce using rule 34 (fun_declaration -> FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt .)


state 157

    (40) param -> ID LBRACKET RBRACKET .

    COMMA           reduce using rule 40 (param -> ID LBRACKET RBRACKET .)
    RPAREN          reduce using rule 40 (param -> ID LBRACKET RBRACKET .)


state 158

    (41) compount_stmt -> LBLOCK print_stmt local_declarations print_stmt . statement_list print_stmt RBLOCK
    (11) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (12) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (44) statement_list -> . statement_list statement
    (45) statement_list -> . empty
    (100) empty -> .

  ! shift/reduce conflict for ECHO resolved as shift
    ECHO            shift and go to state 34
    SEMICOLON       reduce using rule 100 (empty -> .)
    LBLOCK          reduce using rule 100 (empty -> .)
    IF              reduce using rule 100 (empty -> .)
    SWITCH          reduce using rule 100 (empty -> .)
    CASE            reduce using rule 100 (empty -> .)
    DEFAULT         reduce using rule 100 (empty -> .)
    FOR             reduce using rule 100 (empty -> .)
    WHILE           reduce using rule 100 (empty -> .)
    RETURN          reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)
    NUMBER          reduce using rule 100 (empty -> .)
    TRUE            reduce using rule 100 (empty -> .)
    FALSE           reduce using rule 100 (empty -> .)
    RBLOCK          reduce using rule 100 (empty -> .)

  ! ECHO            [ reduce using rule 100 (empty -> .) ]

    empty                          shift and go to state 171
    statement_list                 shift and go to state 170

state 159

    (42) local_declarations -> local_declarations var_declaration2 .

    ID              reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)
    AMPERSANT       reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)
    ECHO            reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)
    SEMICOLON       reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)
    LBLOCK          reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)
    IF              reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)
    SWITCH          reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)
    CASE            reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)
    DEFAULT         reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)
    FOR             reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)
    WHILE           reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)
    RETURN          reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)
    LPAREN          reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)
    NUMBER          reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)
    TRUE            reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)
    FALSE           reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)
    RBLOCK          reduce using rule 42 (local_declarations -> local_declarations var_declaration2 .)


state 160

    (66) expression -> var EQUAL AMPERSANT ID .

    SEMICOLON       reduce using rule 66 (expression -> var EQUAL AMPERSANT ID .)
    COMMA           reduce using rule 66 (expression -> var EQUAL AMPERSANT ID .)
    RPAREN          reduce using rule 66 (expression -> var EQUAL AMPERSANT ID .)
    RBRACKET        reduce using rule 66 (expression -> var EQUAL AMPERSANT ID .)


state 161

    (68) var -> ID LBRACKET expression RBRACKET .

    EQUAL           reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    PLUSPLUS        reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    LESS            reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    LESSEQUAL       reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    GREATER         reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    GREATEREQUAL    reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    DEQUAL          reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    DISTINT         reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    ISEQUAL         reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    SEMICOLON       reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 68 (var -> ID LBRACKET expression RBRACKET .)


state 162

    (93) call -> ID LPAREN args RPAREN .

    MINUSMINUS      reduce using rule 93 (call -> ID LPAREN args RPAREN .)
    PLUSPLUS        reduce using rule 93 (call -> ID LPAREN args RPAREN .)
    TIMES           reduce using rule 93 (call -> ID LPAREN args RPAREN .)
    DIVIDE          reduce using rule 93 (call -> ID LPAREN args RPAREN .)
    LESS            reduce using rule 93 (call -> ID LPAREN args RPAREN .)
    LESSEQUAL       reduce using rule 93 (call -> ID LPAREN args RPAREN .)
    GREATER         reduce using rule 93 (call -> ID LPAREN args RPAREN .)
    GREATEREQUAL    reduce using rule 93 (call -> ID LPAREN args RPAREN .)
    DEQUAL          reduce using rule 93 (call -> ID LPAREN args RPAREN .)
    DISTINT         reduce using rule 93 (call -> ID LPAREN args RPAREN .)
    ISEQUAL         reduce using rule 93 (call -> ID LPAREN args RPAREN .)
    PLUS            reduce using rule 93 (call -> ID LPAREN args RPAREN .)
    MINUS           reduce using rule 93 (call -> ID LPAREN args RPAREN .)
    SEMICOLON       reduce using rule 93 (call -> ID LPAREN args RPAREN .)
    RPAREN          reduce using rule 93 (call -> ID LPAREN args RPAREN .)
    COMMA           reduce using rule 93 (call -> ID LPAREN args RPAREN .)
    RBRACKET        reduce using rule 93 (call -> ID LPAREN args RPAREN .)


state 163

    (96) args_list -> args_list COMMA . expression
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    ID              shift and go to state 57
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

    term                           shift and go to state 58
    boolean                        shift and go to state 60
    call                           shift and go to state 48
    factor                         shift and go to state 51
    var                            shift and go to state 52
    simple_expression              shift and go to state 44
    expression                     shift and go to state 172
    additive_expression            shift and go to state 46

state 164

    (56) selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .

    CLOSE_TAG       reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ID              reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    AMPERSANT       reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FUNCTION        reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    REQUIRE         reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    CLASS           reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    IF              reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    SWITCH          reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    CASE            reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    DEFAULT         reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FOR             reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    WHILE           reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ECHO            reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    BREAK           reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    ELSE            reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    LBLOCK          reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    RETURN          reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    LPAREN          reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    NUMBER          reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    TRUE            reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    FALSE           reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)
    RBLOCK          reduce using rule 56 (selection_stmt -> CASE NUMBER COLON statement BREAK SEMICOLON .)


state 165

    (54) selection_stmt -> IF LPAREN expression RPAREN statement ELSE . statement
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . return_stmt
    (51) expression_stmt -> . expression SEMICOLON
    (52) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (55) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . print_stmt
    (59) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (60) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (61) iteration_stmt -> . print_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (100) empty -> .
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 47
    LBLOCK          shift and go to state 43
    IF              shift and go to state 12
    SWITCH          shift and go to state 10
    CASE            shift and go to state 9
    DEFAULT         shift and go to state 4
    FOR             shift and go to state 17
    WHILE           shift and go to state 6
    RETURN          shift and go to state 40
    ID              shift and go to state 57
    ECHO            reduce using rule 100 (empty -> .)
    CLOSE_TAG       reduce using rule 100 (empty -> .)
    AMPERSANT       reduce using rule 100 (empty -> .)
    FUNCTION        reduce using rule 100 (empty -> .)
    REQUIRE         reduce using rule 100 (empty -> .)
    CLASS           reduce using rule 100 (empty -> .)
    BREAK           reduce using rule 100 (empty -> .)
    ELSE            reduce using rule 100 (empty -> .)
    RBLOCK          reduce using rule 100 (empty -> .)
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

  ! ID              [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! SWITCH          [ reduce using rule 100 (empty -> .) ]
  ! CASE            [ reduce using rule 100 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 100 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 100 (empty -> .) ]
  ! RETURN          [ reduce using rule 100 (empty -> .) ]
  ! LPAREN          [ reduce using rule 100 (empty -> .) ]
  ! NUMBER          [ reduce using rule 100 (empty -> .) ]
  ! TRUE            [ reduce using rule 100 (empty -> .) ]
  ! FALSE           [ reduce using rule 100 (empty -> .) ]

    boolean                        shift and go to state 60
    return_stmt                    shift and go to state 42
    simple_expression              shift and go to state 44
    additive_expression            shift and go to state 46
    call                           shift and go to state 48
    statement                      shift and go to state 173
    factor                         shift and go to state 51
    var                            shift and go to state 52
    expression_stmt                shift and go to state 49
    empty                          shift and go to state 14
    print_stmt                     shift and go to state 54
    compount_stmt                  shift and go to state 55
    selection_stmt                 shift and go to state 53
    term                           shift and go to state 58
    iteration_stmt                 shift and go to state 61
    expression                     shift and go to state 62

state 166

    (18) attributes -> scope var_declaration2 .

    PRIVATE         reduce using rule 18 (attributes -> scope var_declaration2 .)
    PUBLIC          reduce using rule 18 (attributes -> scope var_declaration2 .)
    PROTECTED       reduce using rule 18 (attributes -> scope var_declaration2 .)
    ECHO            reduce using rule 18 (attributes -> scope var_declaration2 .)


state 167

    (16) class_stmt -> LBLOCK print_stmt attributes print_stmt . methods print_stmt RBLOCK
    (11) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (12) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (19) methods -> . methods scope fun_declaration
    (20) methods -> . scope fun_declaration
    (21) scope -> . PRIVATE
    (22) scope -> . PUBLIC
    (23) scope -> . PROTECTED

    ECHO            shift and go to state 34
    PRIVATE         shift and go to state 147
    PUBLIC          shift and go to state 146
    PROTECTED       shift and go to state 148

    methods                        shift and go to state 174
    scope                          shift and go to state 175

state 168

    (17) attributes -> attributes scope . var_declaration2
    (24) var_declaration2 -> . ID SEMICOLON var_declaration2
    (25) var_declaration2 -> . ID SEMICOLON
    (26) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON var_declaration2
    (27) var_declaration2 -> . ID EQUAL NUMBER SEMICOLON
    (28) var_declaration2 -> . ID EQUAL boolean SEMICOLON var_declaration2
    (29) var_declaration2 -> . ID EQUAL boolean SEMICOLON
    (30) var_declaration2 -> . ID EQUAL ID SEMICOLON var_declaration2
    (31) var_declaration2 -> . ID EQUAL ID SEMICOLON
    (32) var_declaration2 -> . AMPERSANT ID SEMICOLON var_declaration2
    (33) var_declaration2 -> . AMPERSANT ID SEMICOLON

    ID              shift and go to state 20
    AMPERSANT       shift and go to state 16

    var_declaration2               shift and go to state 176

state 169

    (59) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON . additive_expression RPAREN statement
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    ID              shift and go to state 57
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

    term                           shift and go to state 58
    var                            shift and go to state 129
    boolean                        shift and go to state 60
    call                           shift and go to state 48
    factor                         shift and go to state 51
    additive_expression            shift and go to state 177

state 170

    (41) compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list . print_stmt RBLOCK
    (44) statement_list -> statement_list . statement
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . return_stmt
    (100) empty -> .
    (51) expression_stmt -> . expression SEMICOLON
    (52) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (55) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . print_stmt
    (59) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (60) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (61) iteration_stmt -> . print_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    RBLOCK          reduce using rule 100 (empty -> .)
    ECHO            reduce using rule 100 (empty -> .)
    SEMICOLON       shift and go to state 47
    LBLOCK          shift and go to state 43
    IF              shift and go to state 12
    SWITCH          shift and go to state 10
    CASE            shift and go to state 9
    DEFAULT         shift and go to state 4
    FOR             shift and go to state 17
    WHILE           shift and go to state 6
    RETURN          shift and go to state 40
    ID              shift and go to state 57
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

  ! SEMICOLON       [ reduce using rule 100 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! SWITCH          [ reduce using rule 100 (empty -> .) ]
  ! CASE            [ reduce using rule 100 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! RETURN          [ reduce using rule 100 (empty -> .) ]
  ! ID              [ reduce using rule 100 (empty -> .) ]
  ! LPAREN          [ reduce using rule 100 (empty -> .) ]
  ! NUMBER          [ reduce using rule 100 (empty -> .) ]
  ! TRUE            [ reduce using rule 100 (empty -> .) ]
  ! FALSE           [ reduce using rule 100 (empty -> .) ]

    boolean                        shift and go to state 60
    return_stmt                    shift and go to state 42
    simple_expression              shift and go to state 44
    additive_expression            shift and go to state 46
    call                           shift and go to state 48
    statement                      shift and go to state 178
    factor                         shift and go to state 51
    var                            shift and go to state 52
    expression_stmt                shift and go to state 49
    empty                          shift and go to state 14
    print_stmt                     shift and go to state 179
    compount_stmt                  shift and go to state 55
    selection_stmt                 shift and go to state 53
    term                           shift and go to state 58
    iteration_stmt                 shift and go to state 61
    expression                     shift and go to state 62

state 171

    (45) statement_list -> empty .

    SEMICOLON       reduce using rule 45 (statement_list -> empty .)
    LBLOCK          reduce using rule 45 (statement_list -> empty .)
    IF              reduce using rule 45 (statement_list -> empty .)
    SWITCH          reduce using rule 45 (statement_list -> empty .)
    CASE            reduce using rule 45 (statement_list -> empty .)
    DEFAULT         reduce using rule 45 (statement_list -> empty .)
    FOR             reduce using rule 45 (statement_list -> empty .)
    WHILE           reduce using rule 45 (statement_list -> empty .)
    RETURN          reduce using rule 45 (statement_list -> empty .)
    ID              reduce using rule 45 (statement_list -> empty .)
    LPAREN          reduce using rule 45 (statement_list -> empty .)
    NUMBER          reduce using rule 45 (statement_list -> empty .)
    TRUE            reduce using rule 45 (statement_list -> empty .)
    FALSE           reduce using rule 45 (statement_list -> empty .)
    RBLOCK          reduce using rule 45 (statement_list -> empty .)
    ECHO            reduce using rule 45 (statement_list -> empty .)


state 172

    (96) args_list -> args_list COMMA expression .

    COMMA           reduce using rule 96 (args_list -> args_list COMMA expression .)
    RPAREN          reduce using rule 96 (args_list -> args_list COMMA expression .)


state 173

    (54) selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .

    CLOSE_TAG       reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    AMPERSANT       reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FUNCTION        reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    REQUIRE         reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    CLASS           reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    SWITCH          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    CASE            reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    DEFAULT         reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ECHO            reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBLOCK          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    TRUE            reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    FALSE           reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBLOCK          reduce using rule 54 (selection_stmt -> IF LPAREN expression RPAREN statement ELSE statement .)


state 174

    (16) class_stmt -> LBLOCK print_stmt attributes print_stmt methods . print_stmt RBLOCK
    (19) methods -> methods . scope fun_declaration
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (21) scope -> . PRIVATE
    (22) scope -> . PUBLIC
    (23) scope -> . PROTECTED
    (100) empty -> .

    PRIVATE         shift and go to state 147
    PUBLIC          shift and go to state 146
    PROTECTED       shift and go to state 148
    RBLOCK          reduce using rule 100 (empty -> .)
    ECHO            reduce using rule 100 (empty -> .)

    print_stmt                     shift and go to state 180
    scope                          shift and go to state 181
    empty                          shift and go to state 14

state 175

    (20) methods -> scope . fun_declaration
    (34) fun_declaration -> . FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt

    FUNCTION        shift and go to state 3

    fun_declaration                shift and go to state 182

state 176

    (17) attributes -> attributes scope var_declaration2 .

    PRIVATE         reduce using rule 17 (attributes -> attributes scope var_declaration2 .)
    PUBLIC          reduce using rule 17 (attributes -> attributes scope var_declaration2 .)
    PROTECTED       reduce using rule 17 (attributes -> attributes scope var_declaration2 .)
    ECHO            reduce using rule 17 (attributes -> attributes scope var_declaration2 .)


state 177

    (59) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression . RPAREN statement
    (78) additive_expression -> additive_expression . addop term
    (82) addop -> . PLUS
    (83) addop -> . MINUS

    RPAREN          shift and go to state 183
    PLUS            shift and go to state 93
    MINUS           shift and go to state 96

    addop                          shift and go to state 87

state 178

    (44) statement_list -> statement_list statement .

    SEMICOLON       reduce using rule 44 (statement_list -> statement_list statement .)
    LBLOCK          reduce using rule 44 (statement_list -> statement_list statement .)
    IF              reduce using rule 44 (statement_list -> statement_list statement .)
    SWITCH          reduce using rule 44 (statement_list -> statement_list statement .)
    CASE            reduce using rule 44 (statement_list -> statement_list statement .)
    DEFAULT         reduce using rule 44 (statement_list -> statement_list statement .)
    FOR             reduce using rule 44 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 44 (statement_list -> statement_list statement .)
    RETURN          reduce using rule 44 (statement_list -> statement_list statement .)
    ID              reduce using rule 44 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 44 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 44 (statement_list -> statement_list statement .)
    TRUE            reduce using rule 44 (statement_list -> statement_list statement .)
    FALSE           reduce using rule 44 (statement_list -> statement_list statement .)
    RBLOCK          reduce using rule 44 (statement_list -> statement_list statement .)
    ECHO            reduce using rule 44 (statement_list -> statement_list statement .)


state 179

    (41) compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt . RBLOCK
    (11) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (12) print_stmt -> print_stmt . ECHO ID SEMICOLON
    (58) selection_stmt -> print_stmt .
    (61) iteration_stmt -> print_stmt .

  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
  ! reduce/reduce conflict for SEMICOLON resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for LBLOCK resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for IF resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for SWITCH resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for CASE resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for DEFAULT resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FOR resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for WHILE resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for RETURN resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for ID resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for LPAREN resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for NUMBER resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for TRUE resolved using rule 58 (selection_stmt -> print_stmt .)
  ! reduce/reduce conflict for FALSE resolved using rule 58 (selection_stmt -> print_stmt .)
  ! shift/reduce conflict for RBLOCK resolved as shift
  ! shift/reduce conflict for ECHO resolved as shift
    RBLOCK          shift and go to state 184
    ECHO            shift and go to state 34
    SEMICOLON       reduce using rule 58 (selection_stmt -> print_stmt .)
    LBLOCK          reduce using rule 58 (selection_stmt -> print_stmt .)
    IF              reduce using rule 58 (selection_stmt -> print_stmt .)
    SWITCH          reduce using rule 58 (selection_stmt -> print_stmt .)
    CASE            reduce using rule 58 (selection_stmt -> print_stmt .)
    DEFAULT         reduce using rule 58 (selection_stmt -> print_stmt .)
    FOR             reduce using rule 58 (selection_stmt -> print_stmt .)
    WHILE           reduce using rule 58 (selection_stmt -> print_stmt .)
    RETURN          reduce using rule 58 (selection_stmt -> print_stmt .)
    ID              reduce using rule 58 (selection_stmt -> print_stmt .)
    LPAREN          reduce using rule 58 (selection_stmt -> print_stmt .)
    NUMBER          reduce using rule 58 (selection_stmt -> print_stmt .)
    TRUE            reduce using rule 58 (selection_stmt -> print_stmt .)
    FALSE           reduce using rule 58 (selection_stmt -> print_stmt .)

  ! RBLOCK          [ reduce using rule 58 (selection_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 58 (selection_stmt -> print_stmt .) ]
  ! SEMICOLON       [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! LBLOCK          [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! IF              [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! SWITCH          [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! CASE            [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! DEFAULT         [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! FOR             [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! WHILE           [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! RETURN          [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! ID              [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! LPAREN          [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! NUMBER          [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! TRUE            [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! FALSE           [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! RBLOCK          [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]
  ! ECHO            [ reduce using rule 61 (iteration_stmt -> print_stmt .) ]


state 180

    (16) class_stmt -> LBLOCK print_stmt attributes print_stmt methods print_stmt . RBLOCK
    (11) print_stmt -> print_stmt . ECHO STRING SEMICOLON
    (12) print_stmt -> print_stmt . ECHO ID SEMICOLON

    RBLOCK          shift and go to state 185
    ECHO            shift and go to state 34


state 181

    (19) methods -> methods scope . fun_declaration
    (34) fun_declaration -> . FUNCTION FUNCTION_NAME LPAREN params RPAREN compount_stmt

    FUNCTION        shift and go to state 3

    fun_declaration                shift and go to state 186

state 182

    (20) methods -> scope fun_declaration .

    PRIVATE         reduce using rule 20 (methods -> scope fun_declaration .)
    PUBLIC          reduce using rule 20 (methods -> scope fun_declaration .)
    PROTECTED       reduce using rule 20 (methods -> scope fun_declaration .)
    RBLOCK          reduce using rule 20 (methods -> scope fun_declaration .)
    ECHO            reduce using rule 20 (methods -> scope fun_declaration .)


state 183

    (59) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN . statement
    (46) statement -> . expression_stmt
    (47) statement -> . compount_stmt
    (48) statement -> . selection_stmt
    (49) statement -> . iteration_stmt
    (50) statement -> . return_stmt
    (51) expression_stmt -> . expression SEMICOLON
    (52) expression_stmt -> . SEMICOLON
    (41) compount_stmt -> . LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK
    (53) selection_stmt -> . IF LPAREN expression RPAREN statement
    (54) selection_stmt -> . IF LPAREN expression RPAREN statement ELSE statement
    (55) selection_stmt -> . SWITCH LPAREN var RPAREN statement
    (56) selection_stmt -> . CASE NUMBER COLON statement BREAK SEMICOLON
    (57) selection_stmt -> . DEFAULT COLON statement BREAK SEMICOLON
    (58) selection_stmt -> . print_stmt
    (59) iteration_stmt -> . FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement
    (60) iteration_stmt -> . WHILE LPAREN expression RPAREN statement
    (61) iteration_stmt -> . print_stmt
    (62) return_stmt -> . RETURN SEMICOLON
    (63) return_stmt -> . RETURN expression SEMICOLON
    (64) expression -> . var EQUAL expression
    (65) expression -> . simple_expression
    (66) expression -> . var EQUAL AMPERSANT ID
    (11) print_stmt -> . print_stmt ECHO STRING SEMICOLON
    (12) print_stmt -> . print_stmt ECHO ID SEMICOLON
    (13) print_stmt -> . empty
    (67) var -> . ID
    (68) var -> . ID LBRACKET expression RBRACKET
    (69) simple_expression -> . additive_expression relop additive_expression
    (70) simple_expression -> . additive_expression
    (100) empty -> .
    (78) additive_expression -> . additive_expression addop term
    (79) additive_expression -> . term
    (80) additive_expression -> . term MINUSMINUS
    (81) additive_expression -> . term PLUSPLUS
    (84) term -> . term mulop factor
    (85) term -> . factor
    (88) factor -> . LPAREN expression RPAREN
    (89) factor -> . var
    (90) factor -> . call
    (91) factor -> . NUMBER
    (92) factor -> . boolean
    (93) call -> . ID LPAREN args RPAREN
    (98) boolean -> . TRUE
    (99) boolean -> . FALSE

  ! shift/reduce conflict for ID resolved as shift
  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for SWITCH resolved as shift
  ! shift/reduce conflict for CASE resolved as shift
  ! shift/reduce conflict for DEFAULT resolved as shift
  ! shift/reduce conflict for FOR resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for SEMICOLON resolved as shift
  ! shift/reduce conflict for LBLOCK resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for NUMBER resolved as shift
  ! shift/reduce conflict for TRUE resolved as shift
  ! shift/reduce conflict for FALSE resolved as shift
    SEMICOLON       shift and go to state 47
    LBLOCK          shift and go to state 43
    IF              shift and go to state 12
    SWITCH          shift and go to state 10
    CASE            shift and go to state 9
    DEFAULT         shift and go to state 4
    FOR             shift and go to state 17
    WHILE           shift and go to state 6
    RETURN          shift and go to state 40
    ID              shift and go to state 57
    ECHO            reduce using rule 100 (empty -> .)
    CLOSE_TAG       reduce using rule 100 (empty -> .)
    AMPERSANT       reduce using rule 100 (empty -> .)
    FUNCTION        reduce using rule 100 (empty -> .)
    REQUIRE         reduce using rule 100 (empty -> .)
    CLASS           reduce using rule 100 (empty -> .)
    BREAK           reduce using rule 100 (empty -> .)
    ELSE            reduce using rule 100 (empty -> .)
    RBLOCK          reduce using rule 100 (empty -> .)
    LPAREN          shift and go to state 56
    NUMBER          shift and go to state 41
    TRUE            shift and go to state 45
    FALSE           shift and go to state 59

  ! ID              [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! SWITCH          [ reduce using rule 100 (empty -> .) ]
  ! CASE            [ reduce using rule 100 (empty -> .) ]
  ! DEFAULT         [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! SEMICOLON       [ reduce using rule 100 (empty -> .) ]
  ! LBLOCK          [ reduce using rule 100 (empty -> .) ]
  ! RETURN          [ reduce using rule 100 (empty -> .) ]
  ! LPAREN          [ reduce using rule 100 (empty -> .) ]
  ! NUMBER          [ reduce using rule 100 (empty -> .) ]
  ! TRUE            [ reduce using rule 100 (empty -> .) ]
  ! FALSE           [ reduce using rule 100 (empty -> .) ]

    boolean                        shift and go to state 60
    return_stmt                    shift and go to state 42
    simple_expression              shift and go to state 44
    additive_expression            shift and go to state 46
    call                           shift and go to state 48
    statement                      shift and go to state 187
    factor                         shift and go to state 51
    var                            shift and go to state 52
    expression_stmt                shift and go to state 49
    empty                          shift and go to state 14
    print_stmt                     shift and go to state 54
    compount_stmt                  shift and go to state 55
    selection_stmt                 shift and go to state 53
    term                           shift and go to state 58
    iteration_stmt                 shift and go to state 61
    expression                     shift and go to state 62

state 184

    (41) compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .

    BREAK           reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    CLOSE_TAG       reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    ID              reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    AMPERSANT       reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    FUNCTION        reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    REQUIRE         reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    CLASS           reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    IF              reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    SWITCH          reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    CASE            reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    DEFAULT         reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    FOR             reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    WHILE           reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    ECHO            reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    ELSE            reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    SEMICOLON       reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    LBLOCK          reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    RETURN          reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    LPAREN          reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    NUMBER          reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    TRUE            reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    FALSE           reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    RBLOCK          reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    PRIVATE         reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    PUBLIC          reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)
    PROTECTED       reduce using rule 41 (compount_stmt -> LBLOCK print_stmt local_declarations print_stmt statement_list print_stmt RBLOCK .)


state 185

    (16) class_stmt -> LBLOCK print_stmt attributes print_stmt methods print_stmt RBLOCK .

    CLOSE_TAG       reduce using rule 16 (class_stmt -> LBLOCK print_stmt attributes print_stmt methods print_stmt RBLOCK .)
    ID              reduce using rule 16 (class_stmt -> LBLOCK print_stmt attributes print_stmt methods print_stmt RBLOCK .)
    AMPERSANT       reduce using rule 16 (class_stmt -> LBLOCK print_stmt attributes print_stmt methods print_stmt RBLOCK .)
    FUNCTION        reduce using rule 16 (class_stmt -> LBLOCK print_stmt attributes print_stmt methods print_stmt RBLOCK .)
    REQUIRE         reduce using rule 16 (class_stmt -> LBLOCK print_stmt attributes print_stmt methods print_stmt RBLOCK .)
    CLASS           reduce using rule 16 (class_stmt -> LBLOCK print_stmt attributes print_stmt methods print_stmt RBLOCK .)
    IF              reduce using rule 16 (class_stmt -> LBLOCK print_stmt attributes print_stmt methods print_stmt RBLOCK .)
    SWITCH          reduce using rule 16 (class_stmt -> LBLOCK print_stmt attributes print_stmt methods print_stmt RBLOCK .)
    CASE            reduce using rule 16 (class_stmt -> LBLOCK print_stmt attributes print_stmt methods print_stmt RBLOCK .)
    DEFAULT         reduce using rule 16 (class_stmt -> LBLOCK print_stmt attributes print_stmt methods print_stmt RBLOCK .)
    FOR             reduce using rule 16 (class_stmt -> LBLOCK print_stmt attributes print_stmt methods print_stmt RBLOCK .)
    WHILE           reduce using rule 16 (class_stmt -> LBLOCK print_stmt attributes print_stmt methods print_stmt RBLOCK .)
    ECHO            reduce using rule 16 (class_stmt -> LBLOCK print_stmt attributes print_stmt methods print_stmt RBLOCK .)


state 186

    (19) methods -> methods scope fun_declaration .

    PRIVATE         reduce using rule 19 (methods -> methods scope fun_declaration .)
    PUBLIC          reduce using rule 19 (methods -> methods scope fun_declaration .)
    PROTECTED       reduce using rule 19 (methods -> methods scope fun_declaration .)
    RBLOCK          reduce using rule 19 (methods -> methods scope fun_declaration .)
    ECHO            reduce using rule 19 (methods -> methods scope fun_declaration .)


state 187

    (59) iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .

    CLOSE_TAG       reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ID              reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    AMPERSANT       reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FUNCTION        reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    REQUIRE         reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    CLASS           reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    IF              reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    SWITCH          reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    CASE            reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    DEFAULT         reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FOR             reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    WHILE           reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ECHO            reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    BREAK           reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    ELSE            reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    SEMICOLON       reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    LBLOCK          reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    RETURN          reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    LPAREN          reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    NUMBER          reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    TRUE            reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    FALSE           reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)
    RBLOCK          reduce using rule 59 (iteration_stmt -> FOR LPAREN var_declaration2 SEMICOLON expression SEMICOLON additive_expression RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ID in state 1 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 1 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 1 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 1 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 1 resolved as shift
WARNING: shift/reduce conflict for IF in state 1 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 1 resolved as shift
WARNING: shift/reduce conflict for CASE in state 1 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 1 resolved as shift
WARNING: shift/reduce conflict for FOR in state 1 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 1 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 18 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 18 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 18 resolved as shift
WARNING: shift/reduce conflict for CLOSE_TAG in state 21 resolved as shift
WARNING: shift/reduce conflict for ID in state 21 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 21 resolved as shift
WARNING: shift/reduce conflict for FUNCTION in state 21 resolved as shift
WARNING: shift/reduce conflict for REQUIRE in state 21 resolved as shift
WARNING: shift/reduce conflict for CLASS in state 21 resolved as shift
WARNING: shift/reduce conflict for IF in state 21 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 21 resolved as shift
WARNING: shift/reduce conflict for CASE in state 21 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 21 resolved as shift
WARNING: shift/reduce conflict for FOR in state 21 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 21 resolved as shift
WARNING: shift/reduce conflict for ID in state 35 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 35 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 54 resolved as shift
WARNING: shift/reduce conflict for ID in state 71 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 71 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 86 resolved as shift
WARNING: shift/reduce conflict for ID in state 110 resolved as shift
WARNING: shift/reduce conflict for IF in state 110 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 110 resolved as shift
WARNING: shift/reduce conflict for CASE in state 110 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 110 resolved as shift
WARNING: shift/reduce conflict for FOR in state 110 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 110 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 110 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 110 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 110 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 110 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 110 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 110 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 110 resolved as shift
WARNING: shift/reduce conflict for ID in state 112 resolved as shift
WARNING: shift/reduce conflict for IF in state 112 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 112 resolved as shift
WARNING: shift/reduce conflict for CASE in state 112 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 112 resolved as shift
WARNING: shift/reduce conflict for FOR in state 112 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 112 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 112 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 112 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 112 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 112 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 112 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 112 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 112 resolved as shift
WARNING: shift/reduce conflict for ID in state 113 resolved as shift
WARNING: shift/reduce conflict for IF in state 113 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 113 resolved as shift
WARNING: shift/reduce conflict for CASE in state 113 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 113 resolved as shift
WARNING: shift/reduce conflict for FOR in state 113 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 113 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 113 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 113 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 113 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 113 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 113 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 113 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 113 resolved as shift
WARNING: shift/reduce conflict for ID in state 119 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 119 resolved as shift
WARNING: shift/reduce conflict for ID in state 120 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 120 resolved as shift
WARNING: shift/reduce conflict for ID in state 121 resolved as shift
WARNING: shift/reduce conflict for AMPERSANT in state 121 resolved as shift
WARNING: shift/reduce conflict for ID in state 126 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 145 resolved as shift
WARNING: shift/reduce conflict for PRIVATE in state 150 resolved as shift
WARNING: shift/reduce conflict for PUBLIC in state 150 resolved as shift
WARNING: shift/reduce conflict for PROTECTED in state 150 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 158 resolved as shift
WARNING: shift/reduce conflict for ID in state 165 resolved as shift
WARNING: shift/reduce conflict for IF in state 165 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 165 resolved as shift
WARNING: shift/reduce conflict for CASE in state 165 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 165 resolved as shift
WARNING: shift/reduce conflict for FOR in state 165 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 165 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 165 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 165 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 165 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 165 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 165 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 165 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 165 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 170 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 170 resolved as shift
WARNING: shift/reduce conflict for IF in state 170 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 170 resolved as shift
WARNING: shift/reduce conflict for CASE in state 170 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 170 resolved as shift
WARNING: shift/reduce conflict for FOR in state 170 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 170 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 170 resolved as shift
WARNING: shift/reduce conflict for ID in state 170 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 170 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 170 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 170 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 170 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 179 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 179 resolved as shift
WARNING: shift/reduce conflict for RBLOCK in state 179 resolved as shift
WARNING: shift/reduce conflict for ECHO in state 179 resolved as shift
WARNING: shift/reduce conflict for ID in state 183 resolved as shift
WARNING: shift/reduce conflict for IF in state 183 resolved as shift
WARNING: shift/reduce conflict for SWITCH in state 183 resolved as shift
WARNING: shift/reduce conflict for CASE in state 183 resolved as shift
WARNING: shift/reduce conflict for DEFAULT in state 183 resolved as shift
WARNING: shift/reduce conflict for FOR in state 183 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 183 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 183 resolved as shift
WARNING: shift/reduce conflict for LBLOCK in state 183 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 183 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 183 resolved as shift
WARNING: shift/reduce conflict for NUMBER in state 183 resolved as shift
WARNING: shift/reduce conflict for TRUE in state 183 resolved as shift
WARNING: shift/reduce conflict for FALSE in state 183 resolved as shift
WARNING: reduce/reduce conflict in state 18 resolved using rule (declaration -> print_stmt)
WARNING: rejected rule (selection_stmt -> print_stmt) in state 18
WARNING: reduce/reduce conflict in state 18 resolved using rule (declaration -> print_stmt)
WARNING: rejected rule (iteration_stmt -> print_stmt) in state 18
WARNING: reduce/reduce conflict in state 54 resolved using rule (selection_stmt -> print_stmt)
WARNING: rejected rule (iteration_stmt -> print_stmt) in state 54
WARNING: reduce/reduce conflict in state 179 resolved using rule (selection_stmt -> print_stmt)
WARNING: rejected rule (iteration_stmt -> print_stmt) in state 179
WARNING: Rule (iteration_stmt -> print_stmt) is never reduced
